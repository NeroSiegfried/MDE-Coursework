grammar uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL with org.eclipse.xtext.common.Terminals

generate chessDSL "http://www.ac.uk/kcl/in/nerosiegfried/chessdsl/ChessDSL"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:

	game=Game

;



Game:

	'Game' title=STRING

	('Players:' players+=Player+)?

	(initial=InitialState)?

	'Moves:' 
	
		moves+=MovePair*
		
	'end'

	(conclusion=Conclusion)?

;



Player:

	color=Color ':' name=STRING

;



InitialState:

	{InitialState}

	'InitialState' ('fresh' | 'custom' positions=CustomPositions)?

;



CustomPositions:

	{CustomPositions}

	'Positions:' '{'

		(placement+=Placement)*

	'}'

;



Placement:

	//e.g., "White King on e1" or "Black Pawn = a7"

	piece=CustomPiece ('=' | 'on') square=Square

;



CustomPiece:

	(color=Color)

	(kind=Piece)

;



MovePair:

	//whiteMove can also be '...' when Black plays first in the position

	//or from where the records start. blackMove is optional depending on

	//where the records end or how the game itself ends

	moveNumber=MOVENUMBER

	(((color1=PlayerOrColor)? whiteMove=AnyMove )| "...")

	((color2=PlayerOrColor)? blackMove=AnyMove)?

;



terminal MOVENUMBER returns ecore::EString:

	('0'..'9')+ "."

;



AnyMove:
	//for possible extensions to the language
	
	//Pushed up to correct some errors
	
	algebraicmove=Escaped_SANMove |

	move=DSLMove ('(' remarks+=Remark* ')')?
	//An extension of the language, experimental
	//algebraicmove=SANMove

;



DSLMove:

	(Move | Capture | Castle | EnPassant | Promotion | Dummy)

;



Dummy:
	{Dummy}
	'dummy'

;



Move:

	//Pawn(e2 -> e4), Knight from b1 to c3, etc.

	('moves')?

	(piece=Piece)

	('(' from=Square '->' to=Square ')'|

	'from' from=Square 'to' to=Square

	)

;



Capture:

	//An extension of a regular Move

	move=Move

	(('Capture(' capture=Piece ')')|

	(('and')? 'captures' capture=Piece))

;



Castle:

	('Castle(' side=('Kingside'|'Queenside') ')')|

	('castles' ('on' 'the')? side=('Kingside'|'Queenside'))|

	(move=Move 'Castle(' side=('Kingside'|'Queenside') ')')|

	(move=Move 'and' 'castles' side=('Kingside'|'Queenside'))

;



EnPassant:

	//An extension of a Capture

	capture=Capture 'on' square=Square

;



Promotion:

	//e.g., promotes pawn to Queen on e8,

	//

	move=(Move|Capture) 'Promotion(' piece=Piece ')'

;



enum Remark:
	Good |

	Bad |

	Excellent |

	Risky |

	Dubious |

	Check |

	Checkmate

;

/**
 * SanMove and Related Implementations in this segment
 */
 
Escaped_SANMove returns SANMove:
	{SANMove}
	token = SAN_TOKEN
;
 
terminal SAN_TOKEN:
	 ESCAPE(
	 	("O-O"("-O")?) |
	     (('K'|'Q'|'R'|'B'|'N')?                  // Optional piece letter; if missing, it's a pawn.
	     (LETTER | RANKDIGIT)*                   // Optional disambiguation.
	     ('x')?                                  // Optional capture indicator.
	     SQUARETERMINAL                        // Target square.
	     ('=' ('Q'|'R'|'B'|'N'))?                // Optional promotion.
	     ('+'|'#')*                              // Optional check or mate markers.
	     ('!'|'?')*                              // Optional remarks.
	    )
	)
;

terminal LETTER: ('a'..'h');
terminal RANKDIGIT: ('1'..'8');
terminal ESCAPE: ('@') ;
 
 //End segment

Conclusion:

	(method=Method)? result=Result

;



Method:

	(win = Win )|
	(draw = Draw)

;



Win:

	(time = TimeUp) |
	(resign = Resign) |
	(mate = Checkmate)

;





TimeUp:

	player=PlayerOrColor 'ran' 'out' 'of' 'time'

;



Resign:

	player=PlayerOrColor 'resigned'

;



Checkmate:

	player1=PlayerOrColor 'checkmated' player2=PlayerOrColor

;



Draw:

	player1=PlayerOrColor 'and' player2=PlayerOrColor

	result=(Stalemate|Threefold|Fifty|Agree)

;



Stalemate returns EString:

	'ended' 'the' 'game' 'in' 'a' 'stalemate'

;



Threefold returns EString:

	'repeated' 'a' 'position' 'three' 'times'

;



Fifty returns EString:

	'played' 'fifty' 'moves' 'without' 'a' 'capture'

;



Agree returns EString:

	'agreed' 'to' 'a' 'draw'

;



Result:

	((player=[Player]|color=Color) 'wins')|

	('draw')

;


PlayerOrColor:
	(player = [Player]) |
	(color = Color)
;



enum Color:

	White | Black

;



enum Piece:

	King  |

	Queen |

	Rook  |

	Bishop|

	Knight|

	Pawn

;



Square:
	square=SQUARETERMINAL
;



terminal SQUARETERMINAL:
	LETTER RANKDIGIT

;