/**
 * generated by Xtext 2.38.0
 */
package uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.ChessDSLPackage;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.Conclusion;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.Game;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.InitialState;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.MovePair;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.Player;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Game</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl.GameImpl#getTitle <em>Title</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl.GameImpl#getPlayers <em>Players</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl.GameImpl#getInitial <em>Initial</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl.GameImpl#getMoves <em>Moves</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl.GameImpl#getConclusion <em>Conclusion</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GameImpl extends MinimalEObjectImpl.Container implements Game
{
  /**
   * The default value of the '{@link #getTitle() <em>Title</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTitle()
   * @generated
   * @ordered
   */
  protected static final String TITLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTitle() <em>Title</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTitle()
   * @generated
   * @ordered
   */
  protected String title = TITLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getPlayers() <em>Players</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlayers()
   * @generated
   * @ordered
   */
  protected EList<Player> players;

  /**
   * The cached value of the '{@link #getInitial() <em>Initial</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitial()
   * @generated
   * @ordered
   */
  protected InitialState initial;

  /**
   * The cached value of the '{@link #getMoves() <em>Moves</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoves()
   * @generated
   * @ordered
   */
  protected EList<MovePair> moves;

  /**
   * The cached value of the '{@link #getConclusion() <em>Conclusion</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConclusion()
   * @generated
   * @ordered
   */
  protected Conclusion conclusion;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ChessDSLPackage.Literals.GAME;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTitle()
  {
    return title;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTitle(String newTitle)
  {
    String oldTitle = title;
    title = newTitle;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.GAME__TITLE, oldTitle, title));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Player> getPlayers()
  {
    if (players == null)
    {
      players = new EObjectContainmentEList<Player>(Player.class, this, ChessDSLPackage.GAME__PLAYERS);
    }
    return players;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialState getInitial()
  {
    return initial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitial(InitialState newInitial, NotificationChain msgs)
  {
    InitialState oldInitial = initial;
    initial = newInitial;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.GAME__INITIAL, oldInitial, newInitial);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitial(InitialState newInitial)
  {
    if (newInitial != initial)
    {
      NotificationChain msgs = null;
      if (initial != null)
        msgs = ((InternalEObject)initial).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.GAME__INITIAL, null, msgs);
      if (newInitial != null)
        msgs = ((InternalEObject)newInitial).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.GAME__INITIAL, null, msgs);
      msgs = basicSetInitial(newInitial, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.GAME__INITIAL, newInitial, newInitial));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MovePair> getMoves()
  {
    if (moves == null)
    {
      moves = new EObjectContainmentEList<MovePair>(MovePair.class, this, ChessDSLPackage.GAME__MOVES);
    }
    return moves;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conclusion getConclusion()
  {
    return conclusion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConclusion(Conclusion newConclusion, NotificationChain msgs)
  {
    Conclusion oldConclusion = conclusion;
    conclusion = newConclusion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.GAME__CONCLUSION, oldConclusion, newConclusion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConclusion(Conclusion newConclusion)
  {
    if (newConclusion != conclusion)
    {
      NotificationChain msgs = null;
      if (conclusion != null)
        msgs = ((InternalEObject)conclusion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.GAME__CONCLUSION, null, msgs);
      if (newConclusion != null)
        msgs = ((InternalEObject)newConclusion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.GAME__CONCLUSION, null, msgs);
      msgs = basicSetConclusion(newConclusion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.GAME__CONCLUSION, newConclusion, newConclusion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ChessDSLPackage.GAME__PLAYERS:
        return ((InternalEList<?>)getPlayers()).basicRemove(otherEnd, msgs);
      case ChessDSLPackage.GAME__INITIAL:
        return basicSetInitial(null, msgs);
      case ChessDSLPackage.GAME__MOVES:
        return ((InternalEList<?>)getMoves()).basicRemove(otherEnd, msgs);
      case ChessDSLPackage.GAME__CONCLUSION:
        return basicSetConclusion(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ChessDSLPackage.GAME__TITLE:
        return getTitle();
      case ChessDSLPackage.GAME__PLAYERS:
        return getPlayers();
      case ChessDSLPackage.GAME__INITIAL:
        return getInitial();
      case ChessDSLPackage.GAME__MOVES:
        return getMoves();
      case ChessDSLPackage.GAME__CONCLUSION:
        return getConclusion();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ChessDSLPackage.GAME__TITLE:
        setTitle((String)newValue);
        return;
      case ChessDSLPackage.GAME__PLAYERS:
        getPlayers().clear();
        getPlayers().addAll((Collection<? extends Player>)newValue);
        return;
      case ChessDSLPackage.GAME__INITIAL:
        setInitial((InitialState)newValue);
        return;
      case ChessDSLPackage.GAME__MOVES:
        getMoves().clear();
        getMoves().addAll((Collection<? extends MovePair>)newValue);
        return;
      case ChessDSLPackage.GAME__CONCLUSION:
        setConclusion((Conclusion)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.GAME__TITLE:
        setTitle(TITLE_EDEFAULT);
        return;
      case ChessDSLPackage.GAME__PLAYERS:
        getPlayers().clear();
        return;
      case ChessDSLPackage.GAME__INITIAL:
        setInitial((InitialState)null);
        return;
      case ChessDSLPackage.GAME__MOVES:
        getMoves().clear();
        return;
      case ChessDSLPackage.GAME__CONCLUSION:
        setConclusion((Conclusion)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.GAME__TITLE:
        return TITLE_EDEFAULT == null ? title != null : !TITLE_EDEFAULT.equals(title);
      case ChessDSLPackage.GAME__PLAYERS:
        return players != null && !players.isEmpty();
      case ChessDSLPackage.GAME__INITIAL:
        return initial != null;
      case ChessDSLPackage.GAME__MOVES:
        return moves != null && !moves.isEmpty();
      case ChessDSLPackage.GAME__CONCLUSION:
        return conclusion != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (title: ");
    result.append(title);
    result.append(')');
    return result.toString();
  }

} //GameImpl
