/**
 * generated by Xtext 2.38.0
 */
package uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.AnyMove;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.ChessDSLPackage;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.DSLMove;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.Remark;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Any Move</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl.AnyMoveImpl#getMove <em>Move</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl.AnyMoveImpl#getRemarks <em>Remarks</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AnyMoveImpl extends MinimalEObjectImpl.Container implements AnyMove
{
  /**
   * The cached value of the '{@link #getMove() <em>Move</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMove()
   * @generated
   * @ordered
   */
  protected DSLMove move;

  /**
   * The cached value of the '{@link #getRemarks() <em>Remarks</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRemarks()
   * @generated
   * @ordered
   */
  protected EList<Remark> remarks;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnyMoveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ChessDSLPackage.Literals.ANY_MOVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLMove getMove()
  {
    return move;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMove(DSLMove newMove, NotificationChain msgs)
  {
    DSLMove oldMove = move;
    move = newMove;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.ANY_MOVE__MOVE, oldMove, newMove);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMove(DSLMove newMove)
  {
    if (newMove != move)
    {
      NotificationChain msgs = null;
      if (move != null)
        msgs = ((InternalEObject)move).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.ANY_MOVE__MOVE, null, msgs);
      if (newMove != null)
        msgs = ((InternalEObject)newMove).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.ANY_MOVE__MOVE, null, msgs);
      msgs = basicSetMove(newMove, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.ANY_MOVE__MOVE, newMove, newMove));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Remark> getRemarks()
  {
    if (remarks == null)
    {
      remarks = new EDataTypeEList<Remark>(Remark.class, this, ChessDSLPackage.ANY_MOVE__REMARKS);
    }
    return remarks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ChessDSLPackage.ANY_MOVE__MOVE:
        return basicSetMove(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ChessDSLPackage.ANY_MOVE__MOVE:
        return getMove();
      case ChessDSLPackage.ANY_MOVE__REMARKS:
        return getRemarks();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ChessDSLPackage.ANY_MOVE__MOVE:
        setMove((DSLMove)newValue);
        return;
      case ChessDSLPackage.ANY_MOVE__REMARKS:
        getRemarks().clear();
        getRemarks().addAll((Collection<? extends Remark>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.ANY_MOVE__MOVE:
        setMove((DSLMove)null);
        return;
      case ChessDSLPackage.ANY_MOVE__REMARKS:
        getRemarks().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.ANY_MOVE__MOVE:
        return move != null;
      case ChessDSLPackage.ANY_MOVE__REMARKS:
        return remarks != null && !remarks.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (remarks: ");
    result.append(remarks);
    result.append(')');
    return result.toString();
  }

} //AnyMoveImpl
