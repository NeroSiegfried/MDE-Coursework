/**
 * generated by Xtext 2.38.0
 */
package uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.ChessDSLPackage;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.CustomPositions;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.InitialState;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Initial State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl.InitialStateImpl#getPositions <em>Positions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InitialStateImpl extends MinimalEObjectImpl.Container implements InitialState
{
  /**
   * The cached value of the '{@link #getPositions() <em>Positions</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPositions()
   * @generated
   * @ordered
   */
  protected CustomPositions positions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InitialStateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ChessDSLPackage.Literals.INITIAL_STATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustomPositions getPositions()
  {
    return positions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPositions(CustomPositions newPositions, NotificationChain msgs)
  {
    CustomPositions oldPositions = positions;
    positions = newPositions;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.INITIAL_STATE__POSITIONS, oldPositions, newPositions);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPositions(CustomPositions newPositions)
  {
    if (newPositions != positions)
    {
      NotificationChain msgs = null;
      if (positions != null)
        msgs = ((InternalEObject)positions).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.INITIAL_STATE__POSITIONS, null, msgs);
      if (newPositions != null)
        msgs = ((InternalEObject)newPositions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.INITIAL_STATE__POSITIONS, null, msgs);
      msgs = basicSetPositions(newPositions, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.INITIAL_STATE__POSITIONS, newPositions, newPositions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ChessDSLPackage.INITIAL_STATE__POSITIONS:
        return basicSetPositions(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ChessDSLPackage.INITIAL_STATE__POSITIONS:
        return getPositions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ChessDSLPackage.INITIAL_STATE__POSITIONS:
        setPositions((CustomPositions)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.INITIAL_STATE__POSITIONS:
        setPositions((CustomPositions)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.INITIAL_STATE__POSITIONS:
        return positions != null;
    }
    return super.eIsSet(featureID);
  }

} //InitialStateImpl
