/**
 * generated by Xtext 2.38.0
 */
package uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.Checkmate;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.ChessDSLPackage;
import uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.Player;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Checkmate</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl.CheckmateImpl#getPlayer1 <em>Player1</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nerosiegfried.chessdsl.chessDSL.impl.CheckmateImpl#getPlayer2 <em>Player2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheckmateImpl extends WinImpl implements Checkmate
{
  /**
   * The cached value of the '{@link #getPlayer1() <em>Player1</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlayer1()
   * @generated
   * @ordered
   */
  protected Player player1;

  /**
   * The cached value of the '{@link #getPlayer2() <em>Player2</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlayer2()
   * @generated
   * @ordered
   */
  protected Player player2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheckmateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ChessDSLPackage.Literals.CHECKMATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Player getPlayer1()
  {
    if (player1 != null && player1.eIsProxy())
    {
      InternalEObject oldPlayer1 = (InternalEObject)player1;
      player1 = (Player)eResolveProxy(oldPlayer1);
      if (player1 != oldPlayer1)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ChessDSLPackage.CHECKMATE__PLAYER1, oldPlayer1, player1));
      }
    }
    return player1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Player basicGetPlayer1()
  {
    return player1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlayer1(Player newPlayer1)
  {
    Player oldPlayer1 = player1;
    player1 = newPlayer1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.CHECKMATE__PLAYER1, oldPlayer1, player1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Player getPlayer2()
  {
    if (player2 != null && player2.eIsProxy())
    {
      InternalEObject oldPlayer2 = (InternalEObject)player2;
      player2 = (Player)eResolveProxy(oldPlayer2);
      if (player2 != oldPlayer2)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ChessDSLPackage.CHECKMATE__PLAYER2, oldPlayer2, player2));
      }
    }
    return player2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Player basicGetPlayer2()
  {
    return player2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlayer2(Player newPlayer2)
  {
    Player oldPlayer2 = player2;
    player2 = newPlayer2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.CHECKMATE__PLAYER2, oldPlayer2, player2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ChessDSLPackage.CHECKMATE__PLAYER1:
        if (resolve) return getPlayer1();
        return basicGetPlayer1();
      case ChessDSLPackage.CHECKMATE__PLAYER2:
        if (resolve) return getPlayer2();
        return basicGetPlayer2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ChessDSLPackage.CHECKMATE__PLAYER1:
        setPlayer1((Player)newValue);
        return;
      case ChessDSLPackage.CHECKMATE__PLAYER2:
        setPlayer2((Player)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.CHECKMATE__PLAYER1:
        setPlayer1((Player)null);
        return;
      case ChessDSLPackage.CHECKMATE__PLAYER2:
        setPlayer2((Player)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.CHECKMATE__PLAYER1:
        return player1 != null;
      case ChessDSLPackage.CHECKMATE__PLAYER2:
        return player2 != null;
    }
    return super.eIsSet(featureID);
  }

} //CheckmateImpl
