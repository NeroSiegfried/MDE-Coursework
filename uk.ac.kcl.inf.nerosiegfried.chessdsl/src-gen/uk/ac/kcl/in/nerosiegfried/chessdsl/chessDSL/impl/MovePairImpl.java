/**
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.AnyMove;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.ChessDSLPackage;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.MovePair;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.PlayerOrColor;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Move Pair</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.MovePairImpl#getMoveNumber <em>Move Number</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.MovePairImpl#getColor1 <em>Color1</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.MovePairImpl#getWhiteMove <em>White Move</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.MovePairImpl#getColor2 <em>Color2</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.MovePairImpl#getBlackMove <em>Black Move</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MovePairImpl extends MinimalEObjectImpl.Container implements MovePair
{
  /**
   * The default value of the '{@link #getMoveNumber() <em>Move Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoveNumber()
   * @generated
   * @ordered
   */
  protected static final String MOVE_NUMBER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMoveNumber() <em>Move Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoveNumber()
   * @generated
   * @ordered
   */
  protected String moveNumber = MOVE_NUMBER_EDEFAULT;

  /**
   * The cached value of the '{@link #getColor1() <em>Color1</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor1()
   * @generated
   * @ordered
   */
  protected PlayerOrColor color1;

  /**
   * The cached value of the '{@link #getWhiteMove() <em>White Move</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhiteMove()
   * @generated
   * @ordered
   */
  protected AnyMove whiteMove;

  /**
   * The cached value of the '{@link #getColor2() <em>Color2</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor2()
   * @generated
   * @ordered
   */
  protected PlayerOrColor color2;

  /**
   * The cached value of the '{@link #getBlackMove() <em>Black Move</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlackMove()
   * @generated
   * @ordered
   */
  protected AnyMove blackMove;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MovePairImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ChessDSLPackage.Literals.MOVE_PAIR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMoveNumber()
  {
    return moveNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMoveNumber(String newMoveNumber)
  {
    String oldMoveNumber = moveNumber;
    moveNumber = newMoveNumber;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.MOVE_PAIR__MOVE_NUMBER, oldMoveNumber, moveNumber));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlayerOrColor getColor1()
  {
    if (color1 != null && color1.eIsProxy())
    {
      InternalEObject oldColor1 = (InternalEObject)color1;
      color1 = (PlayerOrColor)eResolveProxy(oldColor1);
      if (color1 != oldColor1)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ChessDSLPackage.MOVE_PAIR__COLOR1, oldColor1, color1));
      }
    }
    return color1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlayerOrColor basicGetColor1()
  {
    return color1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColor1(PlayerOrColor newColor1)
  {
    PlayerOrColor oldColor1 = color1;
    color1 = newColor1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.MOVE_PAIR__COLOR1, oldColor1, color1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnyMove getWhiteMove()
  {
    return whiteMove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhiteMove(AnyMove newWhiteMove, NotificationChain msgs)
  {
    AnyMove oldWhiteMove = whiteMove;
    whiteMove = newWhiteMove;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.MOVE_PAIR__WHITE_MOVE, oldWhiteMove, newWhiteMove);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWhiteMove(AnyMove newWhiteMove)
  {
    if (newWhiteMove != whiteMove)
    {
      NotificationChain msgs = null;
      if (whiteMove != null)
        msgs = ((InternalEObject)whiteMove).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.MOVE_PAIR__WHITE_MOVE, null, msgs);
      if (newWhiteMove != null)
        msgs = ((InternalEObject)newWhiteMove).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.MOVE_PAIR__WHITE_MOVE, null, msgs);
      msgs = basicSetWhiteMove(newWhiteMove, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.MOVE_PAIR__WHITE_MOVE, newWhiteMove, newWhiteMove));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlayerOrColor getColor2()
  {
    if (color2 != null && color2.eIsProxy())
    {
      InternalEObject oldColor2 = (InternalEObject)color2;
      color2 = (PlayerOrColor)eResolveProxy(oldColor2);
      if (color2 != oldColor2)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ChessDSLPackage.MOVE_PAIR__COLOR2, oldColor2, color2));
      }
    }
    return color2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlayerOrColor basicGetColor2()
  {
    return color2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColor2(PlayerOrColor newColor2)
  {
    PlayerOrColor oldColor2 = color2;
    color2 = newColor2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.MOVE_PAIR__COLOR2, oldColor2, color2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnyMove getBlackMove()
  {
    return blackMove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlackMove(AnyMove newBlackMove, NotificationChain msgs)
  {
    AnyMove oldBlackMove = blackMove;
    blackMove = newBlackMove;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.MOVE_PAIR__BLACK_MOVE, oldBlackMove, newBlackMove);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBlackMove(AnyMove newBlackMove)
  {
    if (newBlackMove != blackMove)
    {
      NotificationChain msgs = null;
      if (blackMove != null)
        msgs = ((InternalEObject)blackMove).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.MOVE_PAIR__BLACK_MOVE, null, msgs);
      if (newBlackMove != null)
        msgs = ((InternalEObject)newBlackMove).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.MOVE_PAIR__BLACK_MOVE, null, msgs);
      msgs = basicSetBlackMove(newBlackMove, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.MOVE_PAIR__BLACK_MOVE, newBlackMove, newBlackMove));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ChessDSLPackage.MOVE_PAIR__WHITE_MOVE:
        return basicSetWhiteMove(null, msgs);
      case ChessDSLPackage.MOVE_PAIR__BLACK_MOVE:
        return basicSetBlackMove(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ChessDSLPackage.MOVE_PAIR__MOVE_NUMBER:
        return getMoveNumber();
      case ChessDSLPackage.MOVE_PAIR__COLOR1:
        if (resolve) return getColor1();
        return basicGetColor1();
      case ChessDSLPackage.MOVE_PAIR__WHITE_MOVE:
        return getWhiteMove();
      case ChessDSLPackage.MOVE_PAIR__COLOR2:
        if (resolve) return getColor2();
        return basicGetColor2();
      case ChessDSLPackage.MOVE_PAIR__BLACK_MOVE:
        return getBlackMove();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ChessDSLPackage.MOVE_PAIR__MOVE_NUMBER:
        setMoveNumber((String)newValue);
        return;
      case ChessDSLPackage.MOVE_PAIR__COLOR1:
        setColor1((PlayerOrColor)newValue);
        return;
      case ChessDSLPackage.MOVE_PAIR__WHITE_MOVE:
        setWhiteMove((AnyMove)newValue);
        return;
      case ChessDSLPackage.MOVE_PAIR__COLOR2:
        setColor2((PlayerOrColor)newValue);
        return;
      case ChessDSLPackage.MOVE_PAIR__BLACK_MOVE:
        setBlackMove((AnyMove)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.MOVE_PAIR__MOVE_NUMBER:
        setMoveNumber(MOVE_NUMBER_EDEFAULT);
        return;
      case ChessDSLPackage.MOVE_PAIR__COLOR1:
        setColor1((PlayerOrColor)null);
        return;
      case ChessDSLPackage.MOVE_PAIR__WHITE_MOVE:
        setWhiteMove((AnyMove)null);
        return;
      case ChessDSLPackage.MOVE_PAIR__COLOR2:
        setColor2((PlayerOrColor)null);
        return;
      case ChessDSLPackage.MOVE_PAIR__BLACK_MOVE:
        setBlackMove((AnyMove)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.MOVE_PAIR__MOVE_NUMBER:
        return MOVE_NUMBER_EDEFAULT == null ? moveNumber != null : !MOVE_NUMBER_EDEFAULT.equals(moveNumber);
      case ChessDSLPackage.MOVE_PAIR__COLOR1:
        return color1 != null;
      case ChessDSLPackage.MOVE_PAIR__WHITE_MOVE:
        return whiteMove != null;
      case ChessDSLPackage.MOVE_PAIR__COLOR2:
        return color2 != null;
      case ChessDSLPackage.MOVE_PAIR__BLACK_MOVE:
        return blackMove != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (moveNumber: ");
    result.append(moveNumber);
    result.append(')');
    return result.toString();
  }

} //MovePairImpl
