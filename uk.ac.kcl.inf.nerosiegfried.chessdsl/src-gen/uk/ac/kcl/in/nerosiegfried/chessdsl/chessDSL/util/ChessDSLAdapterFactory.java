/**
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.ChessDSLPackage
 * @generated
 */
public class ChessDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ChessDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChessDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ChessDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChessDSLSwitch<Adapter> modelSwitch =
    new ChessDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseGame(Game object)
      {
        return createGameAdapter();
      }
      @Override
      public Adapter casePlayer(Player object)
      {
        return createPlayerAdapter();
      }
      @Override
      public Adapter caseInitialState(InitialState object)
      {
        return createInitialStateAdapter();
      }
      @Override
      public Adapter caseCustomPositions(CustomPositions object)
      {
        return createCustomPositionsAdapter();
      }
      @Override
      public Adapter casePlacement(Placement object)
      {
        return createPlacementAdapter();
      }
      @Override
      public Adapter caseCustomPiece(CustomPiece object)
      {
        return createCustomPieceAdapter();
      }
      @Override
      public Adapter caseMovePair(MovePair object)
      {
        return createMovePairAdapter();
      }
      @Override
      public Adapter caseAnyMove(AnyMove object)
      {
        return createAnyMoveAdapter();
      }
      @Override
      public Adapter caseDSLMove(DSLMove object)
      {
        return createDSLMoveAdapter();
      }
      @Override
      public Adapter caseDummy(Dummy object)
      {
        return createDummyAdapter();
      }
      @Override
      public Adapter caseMove(Move object)
      {
        return createMoveAdapter();
      }
      @Override
      public Adapter caseCapture(Capture object)
      {
        return createCaptureAdapter();
      }
      @Override
      public Adapter caseCastle(Castle object)
      {
        return createCastleAdapter();
      }
      @Override
      public Adapter caseEnPassant(EnPassant object)
      {
        return createEnPassantAdapter();
      }
      @Override
      public Adapter casePromotion(Promotion object)
      {
        return createPromotionAdapter();
      }
      @Override
      public Adapter caseSANMove(SANMove object)
      {
        return createSANMoveAdapter();
      }
      @Override
      public Adapter caseSANCastle(SANCastle object)
      {
        return createSANCastleAdapter();
      }
      @Override
      public Adapter caseSANNormal(SANNormal object)
      {
        return createSANNormalAdapter();
      }
      @Override
      public Adapter caseSANPiece(SANPiece object)
      {
        return createSANPieceAdapter();
      }
      @Override
      public Adapter caseSANDisambiguation(SANDisambiguation object)
      {
        return createSANDisambiguationAdapter();
      }
      @Override
      public Adapter caseSANPromotion(SANPromotion object)
      {
        return createSANPromotionAdapter();
      }
      @Override
      public Adapter caseSANCheckMarker(SANCheckMarker object)
      {
        return createSANCheckMarkerAdapter();
      }
      @Override
      public Adapter caseSANCapture(SANCapture object)
      {
        return createSANCaptureAdapter();
      }
      @Override
      public Adapter caseSANRemark(SANRemark object)
      {
        return createSANRemarkAdapter();
      }
      @Override
      public Adapter caseConclusion(Conclusion object)
      {
        return createConclusionAdapter();
      }
      @Override
      public Adapter caseMethod(Method object)
      {
        return createMethodAdapter();
      }
      @Override
      public Adapter caseWin(Win object)
      {
        return createWinAdapter();
      }
      @Override
      public Adapter caseTimeUp(TimeUp object)
      {
        return createTimeUpAdapter();
      }
      @Override
      public Adapter caseResign(Resign object)
      {
        return createResignAdapter();
      }
      @Override
      public Adapter caseCheckmate(Checkmate object)
      {
        return createCheckmateAdapter();
      }
      @Override
      public Adapter caseDraw(Draw object)
      {
        return createDrawAdapter();
      }
      @Override
      public Adapter caseEString(EString object)
      {
        return createEStringAdapter();
      }
      @Override
      public Adapter caseResult(Result object)
      {
        return createResultAdapter();
      }
      @Override
      public Adapter casePlayerOrColor(PlayerOrColor object)
      {
        return createPlayerOrColorAdapter();
      }
      @Override
      public Adapter caseSquare(Square object)
      {
        return createSquareAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Game <em>Game</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Game
   * @generated
   */
  public Adapter createGameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Player <em>Player</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Player
   * @generated
   */
  public Adapter createPlayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.InitialState <em>Initial State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.InitialState
   * @generated
   */
  public Adapter createInitialStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.CustomPositions <em>Custom Positions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.CustomPositions
   * @generated
   */
  public Adapter createCustomPositionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Placement <em>Placement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Placement
   * @generated
   */
  public Adapter createPlacementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.CustomPiece <em>Custom Piece</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.CustomPiece
   * @generated
   */
  public Adapter createCustomPieceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.MovePair <em>Move Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.MovePair
   * @generated
   */
  public Adapter createMovePairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.AnyMove <em>Any Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.AnyMove
   * @generated
   */
  public Adapter createAnyMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.DSLMove <em>DSL Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.DSLMove
   * @generated
   */
  public Adapter createDSLMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Dummy <em>Dummy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Dummy
   * @generated
   */
  public Adapter createDummyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Move <em>Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Move
   * @generated
   */
  public Adapter createMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Capture <em>Capture</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Capture
   * @generated
   */
  public Adapter createCaptureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Castle <em>Castle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Castle
   * @generated
   */
  public Adapter createCastleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.EnPassant <em>En Passant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.EnPassant
   * @generated
   */
  public Adapter createEnPassantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Promotion <em>Promotion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Promotion
   * @generated
   */
  public Adapter createPromotionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANMove <em>SAN Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANMove
   * @generated
   */
  public Adapter createSANMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANCastle <em>SAN Castle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANCastle
   * @generated
   */
  public Adapter createSANCastleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANNormal <em>SAN Normal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANNormal
   * @generated
   */
  public Adapter createSANNormalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANPiece <em>SAN Piece</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANPiece
   * @generated
   */
  public Adapter createSANPieceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANDisambiguation <em>SAN Disambiguation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANDisambiguation
   * @generated
   */
  public Adapter createSANDisambiguationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANPromotion <em>SAN Promotion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANPromotion
   * @generated
   */
  public Adapter createSANPromotionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANCheckMarker <em>SAN Check Marker</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANCheckMarker
   * @generated
   */
  public Adapter createSANCheckMarkerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANCapture <em>SAN Capture</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANCapture
   * @generated
   */
  public Adapter createSANCaptureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANRemark <em>SAN Remark</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANRemark
   * @generated
   */
  public Adapter createSANRemarkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Conclusion <em>Conclusion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Conclusion
   * @generated
   */
  public Adapter createConclusionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Method <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Method
   * @generated
   */
  public Adapter createMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Win <em>Win</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Win
   * @generated
   */
  public Adapter createWinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.TimeUp <em>Time Up</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.TimeUp
   * @generated
   */
  public Adapter createTimeUpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Resign <em>Resign</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Resign
   * @generated
   */
  public Adapter createResignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Checkmate <em>Checkmate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Checkmate
   * @generated
   */
  public Adapter createCheckmateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Draw <em>Draw</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Draw
   * @generated
   */
  public Adapter createDrawAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.EString <em>EString</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.EString
   * @generated
   */
  public Adapter createEStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Result <em>Result</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Result
   * @generated
   */
  public Adapter createResultAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.PlayerOrColor <em>Player Or Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.PlayerOrColor
   * @generated
   */
  public Adapter createPlayerOrColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Square <em>Square</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Square
   * @generated
   */
  public Adapter createSquareAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ChessDSLAdapterFactory
