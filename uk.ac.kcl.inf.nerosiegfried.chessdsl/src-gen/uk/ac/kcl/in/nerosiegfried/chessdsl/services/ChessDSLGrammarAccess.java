/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.in.nerosiegfried.chessdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ChessDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Model");
		private final Assignment cGameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGameGameParserRuleCall_0 = (RuleCall)cGameAssignment.eContents().get(0);
		
		//Model:
		//    game=Game
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//game=Game
		public Assignment getGameAssignment() { return cGameAssignment; }
		
		//Game
		public RuleCall getGameGameParserRuleCall_0() { return cGameGameParserRuleCall_0; }
	}
	public class GameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Game");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPlayersKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPlayersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPlayersPlayerParserRuleCall_2_1_0 = (RuleCall)cPlayersAssignment_2_1.eContents().get(0);
		private final Assignment cInitialAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialInitialStateParserRuleCall_3_0 = (RuleCall)cInitialAssignment_3.eContents().get(0);
		private final Keyword cMovesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMovesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMovesMovePairParserRuleCall_5_0 = (RuleCall)cMovesAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConclusionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConclusionConclusionParserRuleCall_7_0 = (RuleCall)cConclusionAssignment_7.eContents().get(0);
		
		//Game:
		//    'Game' title=STRING
		//    ('Players:' players+=Player+)?
		//    (initial=InitialState)?
		//    'Moves:'
		//        moves+=MovePair*
		//    'end'
		//    (conclusion=Conclusion)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Game' title=STRING
		//('Players:' players+=Player+)?
		//(initial=InitialState)?
		//'Moves:'
		//    moves+=MovePair*
		//'end'
		//(conclusion=Conclusion)?
		public Group getGroup() { return cGroup; }
		
		//'Game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
		
		//('Players:' players+=Player+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Players:'
		public Keyword getPlayersKeyword_2_0() { return cPlayersKeyword_2_0; }
		
		//players+=Player+
		public Assignment getPlayersAssignment_2_1() { return cPlayersAssignment_2_1; }
		
		//Player
		public RuleCall getPlayersPlayerParserRuleCall_2_1_0() { return cPlayersPlayerParserRuleCall_2_1_0; }
		
		//(initial=InitialState)?
		public Assignment getInitialAssignment_3() { return cInitialAssignment_3; }
		
		//InitialState
		public RuleCall getInitialInitialStateParserRuleCall_3_0() { return cInitialInitialStateParserRuleCall_3_0; }
		
		//'Moves:'
		public Keyword getMovesKeyword_4() { return cMovesKeyword_4; }
		
		//moves+=MovePair*
		public Assignment getMovesAssignment_5() { return cMovesAssignment_5; }
		
		//MovePair
		public RuleCall getMovesMovePairParserRuleCall_5_0() { return cMovesMovePairParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
		
		//(conclusion=Conclusion)?
		public Assignment getConclusionAssignment_7() { return cConclusionAssignment_7; }
		
		//Conclusion
		public RuleCall getConclusionConclusionParserRuleCall_7_0() { return cConclusionConclusionParserRuleCall_7_0; }
	}
	public class PlayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Player");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColorColorEnumRuleCall_0_0 = (RuleCall)cColorAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Player:
		//    color=Color ':' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//color=Color ':' name=STRING
		public Group getGroup() { return cGroup; }
		
		//color=Color
		public Assignment getColorAssignment_0() { return cColorAssignment_0; }
		
		//Color
		public RuleCall getColorColorEnumRuleCall_0_0() { return cColorColorEnumRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class InitialStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.InitialState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitialStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cFreshKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cCustomKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPositionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPositionsCustomPositionsParserRuleCall_2_1_1_0 = (RuleCall)cPositionsAssignment_2_1_1.eContents().get(0);
		
		//InitialState:
		//    {InitialState}
		//    'InitialState' ('fresh' | 'custom' positions=CustomPositions)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{InitialState}
		//'InitialState' ('fresh' | 'custom' positions=CustomPositions)?
		public Group getGroup() { return cGroup; }
		
		//{InitialState}
		public Action getInitialStateAction_0() { return cInitialStateAction_0; }
		
		//'InitialState'
		public Keyword getInitialStateKeyword_1() { return cInitialStateKeyword_1; }
		
		//('fresh' | 'custom' positions=CustomPositions)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'fresh'
		public Keyword getFreshKeyword_2_0() { return cFreshKeyword_2_0; }
		
		//'custom' positions=CustomPositions
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'custom'
		public Keyword getCustomKeyword_2_1_0() { return cCustomKeyword_2_1_0; }
		
		//positions=CustomPositions
		public Assignment getPositionsAssignment_2_1_1() { return cPositionsAssignment_2_1_1; }
		
		//CustomPositions
		public RuleCall getPositionsCustomPositionsParserRuleCall_2_1_1_0() { return cPositionsCustomPositionsParserRuleCall_2_1_1_0; }
	}
	public class CustomPositionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.CustomPositions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCustomPositionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPositionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPlacementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPlacementPlacementParserRuleCall_3_0 = (RuleCall)cPlacementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CustomPositions:
		//    {CustomPositions}
		//    'Positions:' '{'
		//        (placement+=Placement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{CustomPositions}
		//'Positions:' '{'
		//    (placement+=Placement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{CustomPositions}
		public Action getCustomPositionsAction_0() { return cCustomPositionsAction_0; }
		
		//'Positions:'
		public Keyword getPositionsKeyword_1() { return cPositionsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(placement+=Placement)*
		public Assignment getPlacementAssignment_3() { return cPlacementAssignment_3; }
		
		//Placement
		public RuleCall getPlacementPlacementParserRuleCall_3_0() { return cPlacementPlacementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PlacementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Placement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPieceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPieceCustomPieceParserRuleCall_0_0 = (RuleCall)cPieceAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cOnKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cSquareAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSquareSquareParserRuleCall_2_0 = (RuleCall)cSquareAssignment_2.eContents().get(0);
		
		//Placement:
		//    //e.g., "WhiteKing on e1" or "BlackPawn = a7"
		//    piece=CustomPiece ('=' | 'on') square=Square
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////e.g., "WhiteKing on e1" or "BlackPawn = a7"
		//piece=CustomPiece ('=' | 'on') square=Square
		public Group getGroup() { return cGroup; }
		
		////e.g., "WhiteKing on e1" or "BlackPawn = a7"
		//piece=CustomPiece
		public Assignment getPieceAssignment_0() { return cPieceAssignment_0; }
		
		//CustomPiece
		public RuleCall getPieceCustomPieceParserRuleCall_0_0() { return cPieceCustomPieceParserRuleCall_0_0; }
		
		//('=' | 'on')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//'on'
		public Keyword getOnKeyword_1_1() { return cOnKeyword_1_1; }
		
		//square=Square
		public Assignment getSquareAssignment_2() { return cSquareAssignment_2; }
		
		//Square
		public RuleCall getSquareSquareParserRuleCall_2_0() { return cSquareSquareParserRuleCall_2_0; }
	}
	public class CustomPieceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.CustomPiece");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColorColorEnumRuleCall_0_0 = (RuleCall)cColorAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindPieceEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		
		//CustomPiece:
		//    (color=Color)
		//    (kind=Piece)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(color=Color)
		//(kind=Piece)
		public Group getGroup() { return cGroup; }
		
		//(color=Color)
		public Assignment getColorAssignment_0() { return cColorAssignment_0; }
		
		//Color
		public RuleCall getColorColorEnumRuleCall_0_0() { return cColorColorEnumRuleCall_0_0; }
		
		//(kind=Piece)
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//Piece
		public RuleCall getKindPieceEnumRuleCall_1_0() { return cKindPieceEnumRuleCall_1_0; }
	}
	public class MovePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.MovePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMoveNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMoveNumberMOVENUMBERTerminalRuleCall_0_0 = (RuleCall)cMoveNumberAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cColor1Assignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cColor1PlayerOrColorCrossReference_1_0_0_0 = (CrossReference)cColor1Assignment_1_0_0.eContents().get(0);
		private final RuleCall cColor1PlayerOrColorIDTerminalRuleCall_1_0_0_0_1 = (RuleCall)cColor1PlayerOrColorCrossReference_1_0_0_0.eContents().get(1);
		private final Assignment cWhiteMoveAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cWhiteMoveAnyMoveParserRuleCall_1_0_1_0 = (RuleCall)cWhiteMoveAssignment_1_0_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cColor2Assignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cColor2PlayerOrColorCrossReference_2_0_0 = (CrossReference)cColor2Assignment_2_0.eContents().get(0);
		private final RuleCall cColor2PlayerOrColorIDTerminalRuleCall_2_0_0_1 = (RuleCall)cColor2PlayerOrColorCrossReference_2_0_0.eContents().get(1);
		private final Assignment cBlackMoveAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBlackMoveAnyMoveParserRuleCall_2_1_0 = (RuleCall)cBlackMoveAssignment_2_1.eContents().get(0);
		
		//MovePair:
		//    //whiteMove can also be '...' when Black plays first in the position
		//    //or from where the records start. blackMove is optional depending on
		//    //where the records end or how the game itself ends
		//    moveNumber=MOVENUMBER
		//    (((color1=[PlayerOrColor])? whiteMove=AnyMove )| "...")
		//    ((color2=[PlayerOrColor])? blackMove=AnyMove)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////whiteMove can also be '...' when Black plays first in the position
		////or from where the records start. blackMove is optional depending on
		////where the records end or how the game itself ends
		//moveNumber=MOVENUMBER
		//(((color1=[PlayerOrColor])? whiteMove=AnyMove )| "...")
		//((color2=[PlayerOrColor])? blackMove=AnyMove)?
		public Group getGroup() { return cGroup; }
		
		////whiteMove can also be '...' when Black plays first in the position
		////or from where the records start. blackMove is optional depending on
		////where the records end or how the game itself ends
		//moveNumber=MOVENUMBER
		public Assignment getMoveNumberAssignment_0() { return cMoveNumberAssignment_0; }
		
		//MOVENUMBER
		public RuleCall getMoveNumberMOVENUMBERTerminalRuleCall_0_0() { return cMoveNumberMOVENUMBERTerminalRuleCall_0_0; }
		
		//(((color1=[PlayerOrColor])? whiteMove=AnyMove )| "...")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//((color1=[PlayerOrColor])? whiteMove=AnyMove )
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(color1=[PlayerOrColor])?
		public Assignment getColor1Assignment_1_0_0() { return cColor1Assignment_1_0_0; }
		
		//[PlayerOrColor]
		public CrossReference getColor1PlayerOrColorCrossReference_1_0_0_0() { return cColor1PlayerOrColorCrossReference_1_0_0_0; }
		
		//ID
		public RuleCall getColor1PlayerOrColorIDTerminalRuleCall_1_0_0_0_1() { return cColor1PlayerOrColorIDTerminalRuleCall_1_0_0_0_1; }
		
		//whiteMove=AnyMove
		public Assignment getWhiteMoveAssignment_1_0_1() { return cWhiteMoveAssignment_1_0_1; }
		
		//AnyMove
		public RuleCall getWhiteMoveAnyMoveParserRuleCall_1_0_1_0() { return cWhiteMoveAnyMoveParserRuleCall_1_0_1_0; }
		
		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }
		
		//((color2=[PlayerOrColor])? blackMove=AnyMove)?
		public Group getGroup_2() { return cGroup_2; }
		
		//(color2=[PlayerOrColor])?
		public Assignment getColor2Assignment_2_0() { return cColor2Assignment_2_0; }
		
		//[PlayerOrColor]
		public CrossReference getColor2PlayerOrColorCrossReference_2_0_0() { return cColor2PlayerOrColorCrossReference_2_0_0; }
		
		//ID
		public RuleCall getColor2PlayerOrColorIDTerminalRuleCall_2_0_0_1() { return cColor2PlayerOrColorIDTerminalRuleCall_2_0_0_1; }
		
		//blackMove=AnyMove
		public Assignment getBlackMoveAssignment_2_1() { return cBlackMoveAssignment_2_1; }
		
		//AnyMove
		public RuleCall getBlackMoveAnyMoveParserRuleCall_2_1_0() { return cBlackMoveAnyMoveParserRuleCall_2_1_0; }
	}
	public class AnyMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.AnyMove");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMoveAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMoveDSLMoveParserRuleCall_0_0_0 = (RuleCall)cMoveAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cRemarksAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cRemarksRemarkEnumRuleCall_0_1_1_0 = (RuleCall)cRemarksAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cAlgebraicmoveAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAlgebraicmoveSANMoveParserRuleCall_1_0 = (RuleCall)cAlgebraicmoveAssignment_1.eContents().get(0);
		
		//AnyMove:
		//    //for possible extensions to the language
		//    move=DSLMove ('(' remarks+=Remark* ')')? |
		//    //An extension of the language, experimental
		//    algebraicmove=SANMove
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////for possible extensions to the language
		//move=DSLMove ('(' remarks+=Remark* ')')? |
		////An extension of the language, experimental
		//algebraicmove=SANMove
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////for possible extensions to the language
		//move=DSLMove ('(' remarks+=Remark* ')')?
		public Group getGroup_0() { return cGroup_0; }
		
		////for possible extensions to the language
		//move=DSLMove
		public Assignment getMoveAssignment_0_0() { return cMoveAssignment_0_0; }
		
		//DSLMove
		public RuleCall getMoveDSLMoveParserRuleCall_0_0_0() { return cMoveDSLMoveParserRuleCall_0_0_0; }
		
		//('(' remarks+=Remark* ')')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }
		
		//remarks+=Remark*
		public Assignment getRemarksAssignment_0_1_1() { return cRemarksAssignment_0_1_1; }
		
		//Remark
		public RuleCall getRemarksRemarkEnumRuleCall_0_1_1_0() { return cRemarksRemarkEnumRuleCall_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }
		
		////An extension of the language, experimental
		//algebraicmove=SANMove
		public Assignment getAlgebraicmoveAssignment_1() { return cAlgebraicmoveAssignment_1; }
		
		//SANMove
		public RuleCall getAlgebraicmoveSANMoveParserRuleCall_1_0() { return cAlgebraicmoveSANMoveParserRuleCall_1_0; }
	}
	public class DSLMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.DSLMove");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCaptureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCastleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnPassantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPromotionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDummyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//DSLMove:
		//    (Move | Capture | Castle | EnPassant | Promotion | Dummy)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Move | Capture | Castle | EnPassant | Promotion | Dummy)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Move
		public RuleCall getMoveParserRuleCall_0() { return cMoveParserRuleCall_0; }
		
		//Capture
		public RuleCall getCaptureParserRuleCall_1() { return cCaptureParserRuleCall_1; }
		
		//Castle
		public RuleCall getCastleParserRuleCall_2() { return cCastleParserRuleCall_2; }
		
		//EnPassant
		public RuleCall getEnPassantParserRuleCall_3() { return cEnPassantParserRuleCall_3; }
		
		//Promotion
		public RuleCall getPromotionParserRuleCall_4() { return cPromotionParserRuleCall_4; }
		
		//Dummy
		public RuleCall getDummyParserRuleCall_5() { return cDummyParserRuleCall_5; }
	}
	public class DummyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Dummy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDummyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDummyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Dummy:
		//    {Dummy}
		//    'dummy'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Dummy}
		//'dummy'
		public Group getGroup() { return cGroup; }
		
		//{Dummy}
		public Action getDummyAction_0() { return cDummyAction_0; }
		
		//'dummy'
		public Keyword getDummyKeyword_1() { return cDummyKeyword_1; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMovesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPieceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPiecePieceEnumRuleCall_1_0 = (RuleCall)cPieceAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cFromAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cFromSquareParserRuleCall_2_0_1_0 = (RuleCall)cFromAssignment_2_0_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cToAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cToSquareParserRuleCall_2_0_3_0 = (RuleCall)cToAssignment_2_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_4 = (Keyword)cGroup_2_0.eContents().get(4);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cFromKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFromAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFromSquareParserRuleCall_2_1_1_0 = (RuleCall)cFromAssignment_2_1_1.eContents().get(0);
		private final Keyword cToKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cToAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cToSquareParserRuleCall_2_1_3_0 = (RuleCall)cToAssignment_2_1_3.eContents().get(0);
		
		//Move:
		//    //Pawn(e2 -> e4), Knight from b1 to c3, etc.
		//    ('moves')?
		//    (piece=Piece)
		//    ('(' from=Square '->' to=Square ')'|
		//    'from' from=Square 'to' to=Square
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Pawn(e2 -> e4), Knight from b1 to c3, etc.
		//('moves')?
		//(piece=Piece)
		//('(' from=Square '->' to=Square ')'|
		//'from' from=Square 'to' to=Square
		//)
		public Group getGroup() { return cGroup; }
		
		////Pawn(e2 -> e4), Knight from b1 to c3, etc.
		//('moves')?
		public Keyword getMovesKeyword_0() { return cMovesKeyword_0; }
		
		//(piece=Piece)
		public Assignment getPieceAssignment_1() { return cPieceAssignment_1; }
		
		//Piece
		public RuleCall getPiecePieceEnumRuleCall_1_0() { return cPiecePieceEnumRuleCall_1_0; }
		
		//('(' from=Square '->' to=Square ')'|
		//'from' from=Square 'to' to=Square
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'(' from=Square '->' to=Square ')'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//from=Square
		public Assignment getFromAssignment_2_0_1() { return cFromAssignment_2_0_1; }
		
		//Square
		public RuleCall getFromSquareParserRuleCall_2_0_1_0() { return cFromSquareParserRuleCall_2_0_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0_2() { return cHyphenMinusGreaterThanSignKeyword_2_0_2; }
		
		//to=Square
		public Assignment getToAssignment_2_0_3() { return cToAssignment_2_0_3; }
		
		//Square
		public RuleCall getToSquareParserRuleCall_2_0_3_0() { return cToSquareParserRuleCall_2_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_4() { return cRightParenthesisKeyword_2_0_4; }
		
		//'from' from=Square 'to' to=Square
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'from'
		public Keyword getFromKeyword_2_1_0() { return cFromKeyword_2_1_0; }
		
		//from=Square
		public Assignment getFromAssignment_2_1_1() { return cFromAssignment_2_1_1; }
		
		//Square
		public RuleCall getFromSquareParserRuleCall_2_1_1_0() { return cFromSquareParserRuleCall_2_1_1_0; }
		
		//'to'
		public Keyword getToKeyword_2_1_2() { return cToKeyword_2_1_2; }
		
		//to=Square
		public Assignment getToAssignment_2_1_3() { return cToAssignment_2_1_3; }
		
		//Square
		public RuleCall getToSquareParserRuleCall_2_1_3_0() { return cToSquareParserRuleCall_2_1_3_0; }
	}
	public class CaptureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Capture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMoveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMoveMoveParserRuleCall_0_0 = (RuleCall)cMoveAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCaptureKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cCaptureAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cCapturePieceEnumRuleCall_1_0_1_0 = (RuleCall)cCaptureAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cCapturesKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cCaptureAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cCapturePieceEnumRuleCall_1_1_2_0 = (RuleCall)cCaptureAssignment_1_1_2.eContents().get(0);
		
		//Capture:
		//    //An extension of a regular Move
		//    move=Move
		//    (('Capture(' capture=Piece ')')|
		//    (('and')? 'captures' capture=Piece))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////An extension of a regular Move
		//move=Move
		//(('Capture(' capture=Piece ')')|
		//(('and')? 'captures' capture=Piece))
		public Group getGroup() { return cGroup; }
		
		////An extension of a regular Move
		//move=Move
		public Assignment getMoveAssignment_0() { return cMoveAssignment_0; }
		
		//Move
		public RuleCall getMoveMoveParserRuleCall_0_0() { return cMoveMoveParserRuleCall_0_0; }
		
		//(('Capture(' capture=Piece ')')|
		//(('and')? 'captures' capture=Piece))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('Capture(' capture=Piece ')')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'Capture('
		public Keyword getCaptureKeyword_1_0_0() { return cCaptureKeyword_1_0_0; }
		
		//capture=Piece
		public Assignment getCaptureAssignment_1_0_1() { return cCaptureAssignment_1_0_1; }
		
		//Piece
		public RuleCall getCapturePieceEnumRuleCall_1_0_1_0() { return cCapturePieceEnumRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//(('and')? 'captures' capture=Piece)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//('and')?
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }
		
		//'captures'
		public Keyword getCapturesKeyword_1_1_1() { return cCapturesKeyword_1_1_1; }
		
		//capture=Piece
		public Assignment getCaptureAssignment_1_1_2() { return cCaptureAssignment_1_1_2; }
		
		//Piece
		public RuleCall getCapturePieceEnumRuleCall_1_1_2_0() { return cCapturePieceEnumRuleCall_1_1_2_0; }
	}
	public class CastleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Castle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCastleKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSideAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cSideAlternatives_0_1_0 = (Alternatives)cSideAssignment_0_1.eContents().get(0);
		private final Keyword cSideKingsideKeyword_0_1_0_0 = (Keyword)cSideAlternatives_0_1_0.eContents().get(0);
		private final Keyword cSideQueensideKeyword_0_1_0_1 = (Keyword)cSideAlternatives_0_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCastlesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cOnKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cTheKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSideAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cSideAlternatives_1_2_0 = (Alternatives)cSideAssignment_1_2.eContents().get(0);
		private final Keyword cSideKingsideKeyword_1_2_0_0 = (Keyword)cSideAlternatives_1_2_0.eContents().get(0);
		private final Keyword cSideQueensideKeyword_1_2_0_1 = (Keyword)cSideAlternatives_1_2_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cMoveAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMoveMoveParserRuleCall_2_0_0 = (RuleCall)cMoveAssignment_2_0.eContents().get(0);
		private final Keyword cCastleKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSideAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Alternatives cSideAlternatives_2_2_0 = (Alternatives)cSideAssignment_2_2.eContents().get(0);
		private final Keyword cSideKingsideKeyword_2_2_0_0 = (Keyword)cSideAlternatives_2_2_0.eContents().get(0);
		private final Keyword cSideQueensideKeyword_2_2_0_1 = (Keyword)cSideAlternatives_2_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cMoveAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMoveMoveParserRuleCall_3_0_0 = (RuleCall)cMoveAssignment_3_0.eContents().get(0);
		private final Keyword cAndKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cCastlesKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSideAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final Alternatives cSideAlternatives_3_3_0 = (Alternatives)cSideAssignment_3_3.eContents().get(0);
		private final Keyword cSideKingsideKeyword_3_3_0_0 = (Keyword)cSideAlternatives_3_3_0.eContents().get(0);
		private final Keyword cSideQueensideKeyword_3_3_0_1 = (Keyword)cSideAlternatives_3_3_0.eContents().get(1);
		
		//Castle:
		//    ('Castle(' side=('Kingside'|'Queenside') ')')|
		//    ('castles' ('on' 'the')? side=('Kingside'|'Queenside'))|
		//    (move=Move 'Castle(' side=('Kingside'|'Queenside') ')')|
		//    (move=Move 'and' 'castles' side=('Kingside'|'Queenside'))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('Castle(' side=('Kingside'|'Queenside') ')')|
		//('castles' ('on' 'the')? side=('Kingside'|'Queenside'))|
		//(move=Move 'Castle(' side=('Kingside'|'Queenside') ')')|
		//(move=Move 'and' 'castles' side=('Kingside'|'Queenside'))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('Castle(' side=('Kingside'|'Queenside') ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//'Castle('
		public Keyword getCastleKeyword_0_0() { return cCastleKeyword_0_0; }
		
		//side=('Kingside'|'Queenside')
		public Assignment getSideAssignment_0_1() { return cSideAssignment_0_1; }
		
		//('Kingside'|'Queenside')
		public Alternatives getSideAlternatives_0_1_0() { return cSideAlternatives_0_1_0; }
		
		//'Kingside'
		public Keyword getSideKingsideKeyword_0_1_0_0() { return cSideKingsideKeyword_0_1_0_0; }
		
		//'Queenside'
		public Keyword getSideQueensideKeyword_0_1_0_1() { return cSideQueensideKeyword_0_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//('castles' ('on' 'the')? side=('Kingside'|'Queenside'))
		public Group getGroup_1() { return cGroup_1; }
		
		//'castles'
		public Keyword getCastlesKeyword_1_0() { return cCastlesKeyword_1_0; }
		
		//('on' 'the')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'on'
		public Keyword getOnKeyword_1_1_0() { return cOnKeyword_1_1_0; }
		
		//'the'
		public Keyword getTheKeyword_1_1_1() { return cTheKeyword_1_1_1; }
		
		//side=('Kingside'|'Queenside')
		public Assignment getSideAssignment_1_2() { return cSideAssignment_1_2; }
		
		//('Kingside'|'Queenside')
		public Alternatives getSideAlternatives_1_2_0() { return cSideAlternatives_1_2_0; }
		
		//'Kingside'
		public Keyword getSideKingsideKeyword_1_2_0_0() { return cSideKingsideKeyword_1_2_0_0; }
		
		//'Queenside'
		public Keyword getSideQueensideKeyword_1_2_0_1() { return cSideQueensideKeyword_1_2_0_1; }
		
		//(move=Move 'Castle(' side=('Kingside'|'Queenside') ')')
		public Group getGroup_2() { return cGroup_2; }
		
		//move=Move
		public Assignment getMoveAssignment_2_0() { return cMoveAssignment_2_0; }
		
		//Move
		public RuleCall getMoveMoveParserRuleCall_2_0_0() { return cMoveMoveParserRuleCall_2_0_0; }
		
		//'Castle('
		public Keyword getCastleKeyword_2_1() { return cCastleKeyword_2_1; }
		
		//side=('Kingside'|'Queenside')
		public Assignment getSideAssignment_2_2() { return cSideAssignment_2_2; }
		
		//('Kingside'|'Queenside')
		public Alternatives getSideAlternatives_2_2_0() { return cSideAlternatives_2_2_0; }
		
		//'Kingside'
		public Keyword getSideKingsideKeyword_2_2_0_0() { return cSideKingsideKeyword_2_2_0_0; }
		
		//'Queenside'
		public Keyword getSideQueensideKeyword_2_2_0_1() { return cSideQueensideKeyword_2_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//(move=Move 'and' 'castles' side=('Kingside'|'Queenside'))
		public Group getGroup_3() { return cGroup_3; }
		
		//move=Move
		public Assignment getMoveAssignment_3_0() { return cMoveAssignment_3_0; }
		
		//Move
		public RuleCall getMoveMoveParserRuleCall_3_0_0() { return cMoveMoveParserRuleCall_3_0_0; }
		
		//'and'
		public Keyword getAndKeyword_3_1() { return cAndKeyword_3_1; }
		
		//'castles'
		public Keyword getCastlesKeyword_3_2() { return cCastlesKeyword_3_2; }
		
		//side=('Kingside'|'Queenside')
		public Assignment getSideAssignment_3_3() { return cSideAssignment_3_3; }
		
		//('Kingside'|'Queenside')
		public Alternatives getSideAlternatives_3_3_0() { return cSideAlternatives_3_3_0; }
		
		//'Kingside'
		public Keyword getSideKingsideKeyword_3_3_0_0() { return cSideKingsideKeyword_3_3_0_0; }
		
		//'Queenside'
		public Keyword getSideQueensideKeyword_3_3_0_1() { return cSideQueensideKeyword_3_3_0_1; }
	}
	public class EnPassantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.EnPassant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaptureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCaptureCaptureParserRuleCall_0_0 = (RuleCall)cCaptureAssignment_0.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSquareAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSquareSquareParserRuleCall_2_0 = (RuleCall)cSquareAssignment_2.eContents().get(0);
		
		//EnPassant:
		//    //An extension of a Capture
		//    capture=Capture 'on' square=Square
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////An extension of a Capture
		//capture=Capture 'on' square=Square
		public Group getGroup() { return cGroup; }
		
		////An extension of a Capture
		//capture=Capture
		public Assignment getCaptureAssignment_0() { return cCaptureAssignment_0; }
		
		//Capture
		public RuleCall getCaptureCaptureParserRuleCall_0_0() { return cCaptureCaptureParserRuleCall_0_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//square=Square
		public Assignment getSquareAssignment_2() { return cSquareAssignment_2; }
		
		//Square
		public RuleCall getSquareSquareParserRuleCall_2_0() { return cSquareSquareParserRuleCall_2_0; }
	}
	public class PromotionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Promotion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMoveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cMoveAlternatives_0_0 = (Alternatives)cMoveAssignment_0.eContents().get(0);
		private final RuleCall cMoveMoveParserRuleCall_0_0_0 = (RuleCall)cMoveAlternatives_0_0.eContents().get(0);
		private final RuleCall cMoveCaptureParserRuleCall_0_0_1 = (RuleCall)cMoveAlternatives_0_0.eContents().get(1);
		private final Keyword cPromotionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPieceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPiecePieceEnumRuleCall_2_0 = (RuleCall)cPieceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Promotion:
		//    //e.g., promotes pawn to Queen on e8,
		//    //
		//    move=(Move|Capture) 'Promotion(' piece=Piece ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////e.g., promotes pawn to Queen on e8,
		////
		//move=(Move|Capture) 'Promotion(' piece=Piece ')'
		public Group getGroup() { return cGroup; }
		
		////e.g., promotes pawn to Queen on e8,
		////
		//move=(Move|Capture)
		public Assignment getMoveAssignment_0() { return cMoveAssignment_0; }
		
		//(Move|Capture)
		public Alternatives getMoveAlternatives_0_0() { return cMoveAlternatives_0_0; }
		
		//Move
		public RuleCall getMoveMoveParserRuleCall_0_0_0() { return cMoveMoveParserRuleCall_0_0_0; }
		
		//Capture
		public RuleCall getMoveCaptureParserRuleCall_0_0_1() { return cMoveCaptureParserRuleCall_0_0_1; }
		
		//'Promotion('
		public Keyword getPromotionKeyword_1() { return cPromotionKeyword_1; }
		
		//piece=Piece
		public Assignment getPieceAssignment_2() { return cPieceAssignment_2; }
		
		//Piece
		public RuleCall getPiecePieceEnumRuleCall_2_0() { return cPiecePieceEnumRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SANMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SANMove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSANMoveAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cCastleAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cCastleSANCastleParserRuleCall_1_0_0 = (RuleCall)cCastleAssignment_1_0.eContents().get(0);
		private final Assignment cNormalAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNormalSANNormalParserRuleCall_1_1_0 = (RuleCall)cNormalAssignment_1_1.eContents().get(0);
		
		///**
		// * SanMove and Related Implementations in this segment
		// */
		// SANMove returns SANMove:
		//    {SANMove}
		//    ( castle=SANCastle | normal=SANNormal )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SANMove}
		//( castle=SANCastle | normal=SANNormal )
		public Group getGroup() { return cGroup; }
		
		//{SANMove}
		public Action getSANMoveAction_0() { return cSANMoveAction_0; }
		
		//( castle=SANCastle | normal=SANNormal )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//castle=SANCastle
		public Assignment getCastleAssignment_1_0() { return cCastleAssignment_1_0; }
		
		//SANCastle
		public RuleCall getCastleSANCastleParserRuleCall_1_0_0() { return cCastleSANCastleParserRuleCall_1_0_0; }
		
		//normal=SANNormal
		public Assignment getNormalAssignment_1_1() { return cNormalAssignment_1_1; }
		
		//SANNormal
		public RuleCall getNormalSANNormalParserRuleCall_1_1_0() { return cNormalSANNormalParserRuleCall_1_1_0; }
	}
	public class SANCastleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SANCastle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSANCastleAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cOOOKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSideAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Keyword cSideQueensideKeyword_0_1_1_0 = (Keyword)cSideAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOOKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSideAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSideKingsideKeyword_1_1_0 = (Keyword)cSideAssignment_1_1.eContents().get(0);
		
		//SANCastle returns SANCastle:
		//    {SANCastle}
		//    ( "O-O-O"  side = "Queenside"  )|
		//    ( "O-O"  side = "Kingside" )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SANCastle}
		//( "O-O-O"  side = "Queenside"  )|
		//( "O-O"  side = "Kingside" )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SANCastle}
		//( "O-O-O"  side = "Queenside"  )
		public Group getGroup_0() { return cGroup_0; }
		
		//{SANCastle}
		public Action getSANCastleAction_0_0() { return cSANCastleAction_0_0; }
		
		//( "O-O-O"  side = "Queenside"  )
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"O-O-O"
		public Keyword getOOOKeyword_0_1_0() { return cOOOKeyword_0_1_0; }
		
		//side = "Queenside"
		public Assignment getSideAssignment_0_1_1() { return cSideAssignment_0_1_1; }
		
		//"Queenside"
		public Keyword getSideQueensideKeyword_0_1_1_0() { return cSideQueensideKeyword_0_1_1_0; }
		
		//( "O-O"  side = "Kingside" )
		public Group getGroup_1() { return cGroup_1; }
		
		//"O-O"
		public Keyword getOOKeyword_1_0() { return cOOKeyword_1_0; }
		
		//side = "Kingside"
		public Assignment getSideAssignment_1_1() { return cSideAssignment_1_1; }
		
		//"Kingside"
		public Keyword getSideKingsideKeyword_1_1_0() { return cSideKingsideKeyword_1_1_0; }
	}
	public class SANNormalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SANNormal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSANNormalAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPieceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPieceSANPieceParserRuleCall_1_0 = (RuleCall)cPieceAssignment_1.eContents().get(0);
		private final Assignment cDisambAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDisambSANDisambiguationParserRuleCall_2_0 = (RuleCall)cDisambAssignment_2.eContents().get(0);
		private final Assignment cCaptureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCaptureSANCaptureParserRuleCall_3_0 = (RuleCall)cCaptureAssignment_3.eContents().get(0);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetSquareParserRuleCall_4_0 = (RuleCall)cTargetAssignment_4.eContents().get(0);
		private final Assignment cPromotionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPromotionSANPromotionParserRuleCall_5_0 = (RuleCall)cPromotionAssignment_5.eContents().get(0);
		private final Assignment cCheckAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCheckSANCheckMarkerParserRuleCall_6_0 = (RuleCall)cCheckAssignment_6.eContents().get(0);
		private final Assignment cRemarkAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRemarkSANRemarkParserRuleCall_7_0 = (RuleCall)cRemarkAssignment_7.eContents().get(0);
		
		//SANNormal returns SANNormal:
		//    {SANNormal}
		//    piece=SANPiece? disamb=SANDisambiguation? capture=SANCapture? target=Square promotion=SANPromotion? check=SANCheckMarker?
		//    remark=SANRemark?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SANNormal}
		//piece=SANPiece? disamb=SANDisambiguation? capture=SANCapture? target=Square promotion=SANPromotion? check=SANCheckMarker?
		//remark=SANRemark?
		public Group getGroup() { return cGroup; }
		
		//{SANNormal}
		public Action getSANNormalAction_0() { return cSANNormalAction_0; }
		
		//piece=SANPiece?
		public Assignment getPieceAssignment_1() { return cPieceAssignment_1; }
		
		//SANPiece
		public RuleCall getPieceSANPieceParserRuleCall_1_0() { return cPieceSANPieceParserRuleCall_1_0; }
		
		//disamb=SANDisambiguation?
		public Assignment getDisambAssignment_2() { return cDisambAssignment_2; }
		
		//SANDisambiguation
		public RuleCall getDisambSANDisambiguationParserRuleCall_2_0() { return cDisambSANDisambiguationParserRuleCall_2_0; }
		
		//capture=SANCapture?
		public Assignment getCaptureAssignment_3() { return cCaptureAssignment_3; }
		
		//SANCapture
		public RuleCall getCaptureSANCaptureParserRuleCall_3_0() { return cCaptureSANCaptureParserRuleCall_3_0; }
		
		//target=Square
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//Square
		public RuleCall getTargetSquareParserRuleCall_4_0() { return cTargetSquareParserRuleCall_4_0; }
		
		//promotion=SANPromotion?
		public Assignment getPromotionAssignment_5() { return cPromotionAssignment_5; }
		
		//SANPromotion
		public RuleCall getPromotionSANPromotionParserRuleCall_5_0() { return cPromotionSANPromotionParserRuleCall_5_0; }
		
		//check=SANCheckMarker?
		public Assignment getCheckAssignment_6() { return cCheckAssignment_6; }
		
		//SANCheckMarker
		public RuleCall getCheckSANCheckMarkerParserRuleCall_6_0() { return cCheckSANCheckMarkerParserRuleCall_6_0; }
		
		//remark=SANRemark?
		public Assignment getRemarkAssignment_7() { return cRemarkAssignment_7; }
		
		//SANRemark
		public RuleCall getRemarkSANRemarkParserRuleCall_7_0() { return cRemarkSANRemarkParserRuleCall_7_0; }
	}
	public class SANPieceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SANPiece");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSANPieceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cKKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cQKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cRKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cBKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cNKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		
		//SANPiece:
		//    {SANPiece}
		//    ('K' | 'Q' | 'R' | 'B' | 'N')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SANPiece}
		//('K' | 'Q' | 'R' | 'B' | 'N')
		public Group getGroup() { return cGroup; }
		
		//{SANPiece}
		public Action getSANPieceAction_0() { return cSANPieceAction_0; }
		
		//('K' | 'Q' | 'R' | 'B' | 'N')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'K'
		public Keyword getKKeyword_1_0() { return cKKeyword_1_0; }
		
		//'Q'
		public Keyword getQKeyword_1_1() { return cQKeyword_1_1; }
		
		//'R'
		public Keyword getRKeyword_1_2() { return cRKeyword_1_2; }
		
		//'B'
		public Keyword getBKeyword_1_3() { return cBKeyword_1_3; }
		
		//'N'
		public Keyword getNKeyword_1_4() { return cNKeyword_1_4; }
	}
	public class SANDisambiguationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SANDisambiguation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSANDisambiguationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cRANKDIGITTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//SANDisambiguation hidden():
		//    {SANDisambiguation}
		//    (LETTER | RANKDIGIT)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SANDisambiguation}
		//(LETTER | RANKDIGIT)+
		public Group getGroup() { return cGroup; }
		
		//{SANDisambiguation}
		public Action getSANDisambiguationAction_0() { return cSANDisambiguationAction_0; }
		
		//(LETTER | RANKDIGIT)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_1_0() { return cLETTERTerminalRuleCall_1_0; }
		
		//RANKDIGIT
		public RuleCall getRANKDIGITTerminalRuleCall_1_1() { return cRANKDIGITTerminalRuleCall_1_1; }
	}
	public class SANPromotionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SANPromotion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSANPromotionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cQKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cRKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cBKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cNKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		
		//SANPromotion returns SANPromotion:
		//    {SANPromotion}
		//    '=' ('Q' | 'R' | 'B' | 'N')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SANPromotion}
		//'=' ('Q' | 'R' | 'B' | 'N')
		public Group getGroup() { return cGroup; }
		
		//{SANPromotion}
		public Action getSANPromotionAction_0() { return cSANPromotionAction_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//('Q' | 'R' | 'B' | 'N')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Q'
		public Keyword getQKeyword_2_0() { return cQKeyword_2_0; }
		
		//'R'
		public Keyword getRKeyword_2_1() { return cRKeyword_2_1; }
		
		//'B'
		public Keyword getBKeyword_2_2() { return cBKeyword_2_2; }
		
		//'N'
		public Keyword getNKeyword_2_3() { return cNKeyword_2_3; }
	}
	public class SANCheckMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SANCheckMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSANCheckMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//SANCheckMarker returns SANCheckMarker:
		//    {SANCheckMarker}
		//    ('+' | '#')+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SANCheckMarker}
		//('+' | '#')+
		public Group getGroup() { return cGroup; }
		
		//{SANCheckMarker}
		public Action getSANCheckMarkerAction_0() { return cSANCheckMarkerAction_0; }
		
		//('+' | '#')+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_1() { return cNumberSignKeyword_1_1; }
	}
	public class SANCaptureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SANCapture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSANCaptureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SANCapture:
		//    {SANCapture}
		//    'x'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SANCapture}
		//'x'
		public Group getGroup() { return cGroup; }
		
		//{SANCapture}
		public Action getSANCaptureAction_0() { return cSANCaptureAction_0; }
		
		//'x'
		public Keyword getXKeyword_1() { return cXKeyword_1; }
	}
	public class SANRemarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SANRemark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSANRemarkAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//SANRemark returns SANRemark:
		//    {SANRemark}
		//    ('!'|'?')+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SANRemark}
		//('!'|'?')+
		public Group getGroup() { return cGroup; }
		
		//{SANRemark}
		public Action getSANRemarkAction_0() { return cSANRemarkAction_0; }
		
		//('!'|'?')+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}
	public class ConclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Conclusion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMethodMethodParserRuleCall_0_0 = (RuleCall)cMethodAssignment_0.eContents().get(0);
		private final Assignment cResultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultResultParserRuleCall_1_0 = (RuleCall)cResultAssignment_1.eContents().get(0);
		
		// //End segment
		//Conclusion:
		//    (method=Method)? result=Result
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(method=Method)? result=Result
		public Group getGroup() { return cGroup; }
		
		//(method=Method)?
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }
		
		//Method
		public RuleCall getMethodMethodParserRuleCall_0_0() { return cMethodMethodParserRuleCall_0_0; }
		
		//result=Result
		public Assignment getResultAssignment_1() { return cResultAssignment_1; }
		
		//Result
		public RuleCall getResultResultParserRuleCall_1_0() { return cResultResultParserRuleCall_1_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Method");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cWinAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cWinWinParserRuleCall_0_0 = (RuleCall)cWinAssignment_0.eContents().get(0);
		private final Assignment cDrawAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDrawDrawParserRuleCall_1_0 = (RuleCall)cDrawAssignment_1.eContents().get(0);
		
		//Method:
		//    (win = Win )|
		//    (draw = Draw)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(win = Win )|
		//(draw = Draw)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(win = Win )
		public Assignment getWinAssignment_0() { return cWinAssignment_0; }
		
		//Win
		public RuleCall getWinWinParserRuleCall_0_0() { return cWinWinParserRuleCall_0_0; }
		
		//(draw = Draw)
		public Assignment getDrawAssignment_1() { return cDrawAssignment_1; }
		
		//Draw
		public RuleCall getDrawDrawParserRuleCall_1_0() { return cDrawDrawParserRuleCall_1_0; }
	}
	public class WinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Win");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTimeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTimeTimeUpParserRuleCall_0_0 = (RuleCall)cTimeAssignment_0.eContents().get(0);
		private final Assignment cResignAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cResignResignParserRuleCall_1_0 = (RuleCall)cResignAssignment_1.eContents().get(0);
		private final Assignment cMateAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMateCheckmateParserRuleCall_2_0 = (RuleCall)cMateAssignment_2.eContents().get(0);
		
		//Win:
		//    (time = TimeUp) |
		//    (resign = Resign) |
		//    (mate = Checkmate)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(time = TimeUp) |
		//(resign = Resign) |
		//(mate = Checkmate)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(time = TimeUp)
		public Assignment getTimeAssignment_0() { return cTimeAssignment_0; }
		
		//TimeUp
		public RuleCall getTimeTimeUpParserRuleCall_0_0() { return cTimeTimeUpParserRuleCall_0_0; }
		
		//(resign = Resign)
		public Assignment getResignAssignment_1() { return cResignAssignment_1; }
		
		//Resign
		public RuleCall getResignResignParserRuleCall_1_0() { return cResignResignParserRuleCall_1_0; }
		
		//(mate = Checkmate)
		public Assignment getMateAssignment_2() { return cMateAssignment_2; }
		
		//Checkmate
		public RuleCall getMateCheckmateParserRuleCall_2_0() { return cMateCheckmateParserRuleCall_2_0; }
	}
	public class TimeUpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.TimeUp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlayerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPlayerPlayerOrColorParserRuleCall_0_0 = (RuleCall)cPlayerAssignment_0.eContents().get(0);
		private final Keyword cRanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOutKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTimeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TimeUp:
		//    player=PlayerOrColor 'ran' 'out' 'of' 'time'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//player=PlayerOrColor 'ran' 'out' 'of' 'time'
		public Group getGroup() { return cGroup; }
		
		//player=PlayerOrColor
		public Assignment getPlayerAssignment_0() { return cPlayerAssignment_0; }
		
		//PlayerOrColor
		public RuleCall getPlayerPlayerOrColorParserRuleCall_0_0() { return cPlayerPlayerOrColorParserRuleCall_0_0; }
		
		//'ran'
		public Keyword getRanKeyword_1() { return cRanKeyword_1; }
		
		//'out'
		public Keyword getOutKeyword_2() { return cOutKeyword_2; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//'time'
		public Keyword getTimeKeyword_4() { return cTimeKeyword_4; }
	}
	public class ResignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Resign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlayerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPlayerPlayerOrColorParserRuleCall_0_0 = (RuleCall)cPlayerAssignment_0.eContents().get(0);
		private final Keyword cResignedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Resign:
		//    player=PlayerOrColor 'resigned'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//player=PlayerOrColor 'resigned'
		public Group getGroup() { return cGroup; }
		
		//player=PlayerOrColor
		public Assignment getPlayerAssignment_0() { return cPlayerAssignment_0; }
		
		//PlayerOrColor
		public RuleCall getPlayerPlayerOrColorParserRuleCall_0_0() { return cPlayerPlayerOrColorParserRuleCall_0_0; }
		
		//'resigned'
		public Keyword getResignedKeyword_1() { return cResignedKeyword_1; }
	}
	public class CheckmateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Checkmate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlayer1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPlayer1PlayerOrColorParserRuleCall_0_0 = (RuleCall)cPlayer1Assignment_0.eContents().get(0);
		private final Keyword cCheckmatedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPlayer2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPlayer2PlayerOrColorParserRuleCall_2_0 = (RuleCall)cPlayer2Assignment_2.eContents().get(0);
		
		//Checkmate:
		//    player1=PlayerOrColor 'checkmated' player2=PlayerOrColor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//player1=PlayerOrColor 'checkmated' player2=PlayerOrColor
		public Group getGroup() { return cGroup; }
		
		//player1=PlayerOrColor
		public Assignment getPlayer1Assignment_0() { return cPlayer1Assignment_0; }
		
		//PlayerOrColor
		public RuleCall getPlayer1PlayerOrColorParserRuleCall_0_0() { return cPlayer1PlayerOrColorParserRuleCall_0_0; }
		
		//'checkmated'
		public Keyword getCheckmatedKeyword_1() { return cCheckmatedKeyword_1; }
		
		//player2=PlayerOrColor
		public Assignment getPlayer2Assignment_2() { return cPlayer2Assignment_2; }
		
		//PlayerOrColor
		public RuleCall getPlayer2PlayerOrColorParserRuleCall_2_0() { return cPlayer2PlayerOrColorParserRuleCall_2_0; }
	}
	public class DrawElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Draw");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlayer1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPlayer1PlayerOrColorParserRuleCall_0_0 = (RuleCall)cPlayer1Assignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPlayer2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPlayer2PlayerOrColorParserRuleCall_2_0 = (RuleCall)cPlayer2Assignment_2.eContents().get(0);
		private final Assignment cResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cResultAlternatives_3_0 = (Alternatives)cResultAssignment_3.eContents().get(0);
		private final RuleCall cResultStalemateParserRuleCall_3_0_0 = (RuleCall)cResultAlternatives_3_0.eContents().get(0);
		private final RuleCall cResultThreefoldParserRuleCall_3_0_1 = (RuleCall)cResultAlternatives_3_0.eContents().get(1);
		private final RuleCall cResultFiftyParserRuleCall_3_0_2 = (RuleCall)cResultAlternatives_3_0.eContents().get(2);
		private final RuleCall cResultAgreeParserRuleCall_3_0_3 = (RuleCall)cResultAlternatives_3_0.eContents().get(3);
		
		//Draw:
		//    player1=PlayerOrColor 'and' player2=PlayerOrColor
		//    result=(Stalemate|Threefold|Fifty|Agree)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//player1=PlayerOrColor 'and' player2=PlayerOrColor
		//result=(Stalemate|Threefold|Fifty|Agree)
		public Group getGroup() { return cGroup; }
		
		//player1=PlayerOrColor
		public Assignment getPlayer1Assignment_0() { return cPlayer1Assignment_0; }
		
		//PlayerOrColor
		public RuleCall getPlayer1PlayerOrColorParserRuleCall_0_0() { return cPlayer1PlayerOrColorParserRuleCall_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//player2=PlayerOrColor
		public Assignment getPlayer2Assignment_2() { return cPlayer2Assignment_2; }
		
		//PlayerOrColor
		public RuleCall getPlayer2PlayerOrColorParserRuleCall_2_0() { return cPlayer2PlayerOrColorParserRuleCall_2_0; }
		
		//result=(Stalemate|Threefold|Fifty|Agree)
		public Assignment getResultAssignment_3() { return cResultAssignment_3; }
		
		//(Stalemate|Threefold|Fifty|Agree)
		public Alternatives getResultAlternatives_3_0() { return cResultAlternatives_3_0; }
		
		//Stalemate
		public RuleCall getResultStalemateParserRuleCall_3_0_0() { return cResultStalemateParserRuleCall_3_0_0; }
		
		//Threefold
		public RuleCall getResultThreefoldParserRuleCall_3_0_1() { return cResultThreefoldParserRuleCall_3_0_1; }
		
		//Fifty
		public RuleCall getResultFiftyParserRuleCall_3_0_2() { return cResultFiftyParserRuleCall_3_0_2; }
		
		//Agree
		public RuleCall getResultAgreeParserRuleCall_3_0_3() { return cResultAgreeParserRuleCall_3_0_3; }
	}
	public class StalemateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Stalemate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cStalemateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Stalemate returns EString:
		//    'ended' 'the' 'game' 'in' 'a' 'stalemate'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ended' 'the' 'game' 'in' 'a' 'stalemate'
		public Group getGroup() { return cGroup; }
		
		//'ended'
		public Keyword getEndedKeyword_0() { return cEndedKeyword_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//'game'
		public Keyword getGameKeyword_2() { return cGameKeyword_2; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//'a'
		public Keyword getAKeyword_4() { return cAKeyword_4; }
		
		//'stalemate'
		public Keyword getStalemateKeyword_5() { return cStalemateKeyword_5; }
	}
	public class ThreefoldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Threefold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPositionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cThreeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTimesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Threefold returns EString:
		//    'repeated' 'a' 'position' 'three' 'times'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'repeated' 'a' 'position' 'three' 'times'
		public Group getGroup() { return cGroup; }
		
		//'repeated'
		public Keyword getRepeatedKeyword_0() { return cRepeatedKeyword_0; }
		
		//'a'
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//'position'
		public Keyword getPositionKeyword_2() { return cPositionKeyword_2; }
		
		//'three'
		public Keyword getThreeKeyword_3() { return cThreeKeyword_3; }
		
		//'times'
		public Keyword getTimesKeyword_4() { return cTimesKeyword_4; }
	}
	public class FiftyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Fifty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlayedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFiftyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMovesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cWithoutKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCaptureKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Fifty returns EString:
		//    'played' 'fifty' 'moves' 'without' 'a' 'capture'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'played' 'fifty' 'moves' 'without' 'a' 'capture'
		public Group getGroup() { return cGroup; }
		
		//'played'
		public Keyword getPlayedKeyword_0() { return cPlayedKeyword_0; }
		
		//'fifty'
		public Keyword getFiftyKeyword_1() { return cFiftyKeyword_1; }
		
		//'moves'
		public Keyword getMovesKeyword_2() { return cMovesKeyword_2; }
		
		//'without'
		public Keyword getWithoutKeyword_3() { return cWithoutKeyword_3; }
		
		//'a'
		public Keyword getAKeyword_4() { return cAKeyword_4; }
		
		//'capture'
		public Keyword getCaptureKeyword_5() { return cCaptureKeyword_5; }
	}
	public class AgreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Agree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgreedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDrawKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Agree returns EString:
		//    'agreed' 'to' 'a' 'draw'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'agreed' 'to' 'a' 'draw'
		public Group getGroup() { return cGroup; }
		
		//'agreed'
		public Keyword getAgreedKeyword_0() { return cAgreedKeyword_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//'a'
		public Keyword getAKeyword_2() { return cAKeyword_2; }
		
		//'draw'
		public Keyword getDrawKeyword_3() { return cDrawKeyword_3; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cPlayerAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final CrossReference cPlayerPlayerCrossReference_0_0_0_0 = (CrossReference)cPlayerAssignment_0_0_0.eContents().get(0);
		private final RuleCall cPlayerPlayerIDTerminalRuleCall_0_0_0_0_1 = (RuleCall)cPlayerPlayerCrossReference_0_0_0_0.eContents().get(1);
		private final Assignment cColorAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cColorColorEnumRuleCall_0_0_1_0 = (RuleCall)cColorAssignment_0_0_1.eContents().get(0);
		private final Keyword cWinsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cDrawKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Result:
		//    ((player=[Player]|color=Color) 'wins')|
		//    ('draw')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//((player=[Player]|color=Color) 'wins')|
		//('draw')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//((player=[Player]|color=Color) 'wins')
		public Group getGroup_0() { return cGroup_0; }
		
		//(player=[Player]|color=Color)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//player=[Player]
		public Assignment getPlayerAssignment_0_0_0() { return cPlayerAssignment_0_0_0; }
		
		//[Player]
		public CrossReference getPlayerPlayerCrossReference_0_0_0_0() { return cPlayerPlayerCrossReference_0_0_0_0; }
		
		//ID
		public RuleCall getPlayerPlayerIDTerminalRuleCall_0_0_0_0_1() { return cPlayerPlayerIDTerminalRuleCall_0_0_0_0_1; }
		
		//color=Color
		public Assignment getColorAssignment_0_0_1() { return cColorAssignment_0_0_1; }
		
		//Color
		public RuleCall getColorColorEnumRuleCall_0_0_1_0() { return cColorColorEnumRuleCall_0_0_1_0; }
		
		//'wins'
		public Keyword getWinsKeyword_0_1() { return cWinsKeyword_0_1; }
		
		//('draw')
		public Keyword getDrawKeyword_1() { return cDrawKeyword_1; }
	}
	public class PlayerOrColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.PlayerOrColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPlayerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cPlayerPlayerCrossReference_0_0 = (CrossReference)cPlayerAssignment_0.eContents().get(0);
		private final RuleCall cPlayerPlayerIDTerminalRuleCall_0_0_1 = (RuleCall)cPlayerPlayerCrossReference_0_0.eContents().get(1);
		private final Assignment cColorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cColorColorEnumRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		
		//PlayerOrColor:
		//    (player = [Player]) |
		//    (color = Color)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(player = [Player]) |
		//(color = Color)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(player = [Player])
		public Assignment getPlayerAssignment_0() { return cPlayerAssignment_0; }
		
		//[Player]
		public CrossReference getPlayerPlayerCrossReference_0_0() { return cPlayerPlayerCrossReference_0_0; }
		
		//ID
		public RuleCall getPlayerPlayerIDTerminalRuleCall_0_0_1() { return cPlayerPlayerIDTerminalRuleCall_0_0_1; }
		
		//(color = Color)
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }
		
		//Color
		public RuleCall getColorColorEnumRuleCall_1_0() { return cColorColorEnumRuleCall_1_0; }
	}
	public class SquareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Square");
		private final Assignment cSquareAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSquareSQUARETERMINALTerminalRuleCall_0 = (RuleCall)cSquareAssignment.eContents().get(0);
		
		//Square:
		//    square=SQUARETERMINAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//square=SQUARETERMINAL
		public Assignment getSquareAssignment() { return cSquareAssignment; }
		
		//SQUARETERMINAL
		public RuleCall getSquareSQUARETERMINALTerminalRuleCall_0() { return cSquareSQUARETERMINALTerminalRuleCall_0; }
	}
	
	public class RemarkElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Remark");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGoodEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGoodGoodKeyword_0_0 = (Keyword)cGoodEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBadEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBadBadKeyword_1_0 = (Keyword)cBadEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExcellentEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExcellentExcellentKeyword_2_0 = (Keyword)cExcellentEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRiskyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRiskyRiskyKeyword_3_0 = (Keyword)cRiskyEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDubiousEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDubiousDubiousKeyword_4_0 = (Keyword)cDubiousEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCheckEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCheckCheckKeyword_5_0 = (Keyword)cCheckEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCheckmateEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCheckmateCheckmateKeyword_6_0 = (Keyword)cCheckmateEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Remark:
		//    Good |
		//    Bad |
		//    Excellent |
		//    Risky |
		//    Dubious |
		//    Check |
		//    Checkmate
		//;
		public EnumRule getRule() { return rule; }
		
		//Good |
		//Bad |
		//Excellent |
		//Risky |
		//Dubious |
		//Check |
		//Checkmate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Good
		public EnumLiteralDeclaration getGoodEnumLiteralDeclaration_0() { return cGoodEnumLiteralDeclaration_0; }
		
		public Keyword getGoodGoodKeyword_0_0() { return cGoodGoodKeyword_0_0; }
		
		//Bad
		public EnumLiteralDeclaration getBadEnumLiteralDeclaration_1() { return cBadEnumLiteralDeclaration_1; }
		
		public Keyword getBadBadKeyword_1_0() { return cBadBadKeyword_1_0; }
		
		//Excellent
		public EnumLiteralDeclaration getExcellentEnumLiteralDeclaration_2() { return cExcellentEnumLiteralDeclaration_2; }
		
		public Keyword getExcellentExcellentKeyword_2_0() { return cExcellentExcellentKeyword_2_0; }
		
		//Risky
		public EnumLiteralDeclaration getRiskyEnumLiteralDeclaration_3() { return cRiskyEnumLiteralDeclaration_3; }
		
		public Keyword getRiskyRiskyKeyword_3_0() { return cRiskyRiskyKeyword_3_0; }
		
		//Dubious
		public EnumLiteralDeclaration getDubiousEnumLiteralDeclaration_4() { return cDubiousEnumLiteralDeclaration_4; }
		
		public Keyword getDubiousDubiousKeyword_4_0() { return cDubiousDubiousKeyword_4_0; }
		
		//Check
		public EnumLiteralDeclaration getCheckEnumLiteralDeclaration_5() { return cCheckEnumLiteralDeclaration_5; }
		
		public Keyword getCheckCheckKeyword_5_0() { return cCheckCheckKeyword_5_0; }
		
		//Checkmate
		public EnumLiteralDeclaration getCheckmateEnumLiteralDeclaration_6() { return cCheckmateEnumLiteralDeclaration_6; }
		
		public Keyword getCheckmateCheckmateKeyword_6_0() { return cCheckmateCheckmateKeyword_6_0; }
	}
	public class ColorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWhiteEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWhiteWhiteKeyword_0_0 = (Keyword)cWhiteEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBlackEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBlackBlackKeyword_1_0 = (Keyword)cBlackEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Color:
		//    White | Black
		//;
		public EnumRule getRule() { return rule; }
		
		//White | Black
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//White
		public EnumLiteralDeclaration getWhiteEnumLiteralDeclaration_0() { return cWhiteEnumLiteralDeclaration_0; }
		
		public Keyword getWhiteWhiteKeyword_0_0() { return cWhiteWhiteKeyword_0_0; }
		
		//Black
		public EnumLiteralDeclaration getBlackEnumLiteralDeclaration_1() { return cBlackEnumLiteralDeclaration_1; }
		
		public Keyword getBlackBlackKeyword_1_0() { return cBlackBlackKeyword_1_0; }
	}
	public class PieceElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Piece");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cKingEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cKingKingKeyword_0_0 = (Keyword)cKingEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cQueenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cQueenQueenKeyword_1_0 = (Keyword)cQueenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRookEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRookRookKeyword_2_0 = (Keyword)cRookEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBishopEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBishopBishopKeyword_3_0 = (Keyword)cBishopEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cKnightEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cKnightKnightKeyword_4_0 = (Keyword)cKnightEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPawnEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPawnPawnKeyword_5_0 = (Keyword)cPawnEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Piece:
		//    King  |
		//    Queen |
		//    Rook  |
		//    Bishop|
		//    Knight|
		//    Pawn
		//;
		public EnumRule getRule() { return rule; }
		
		//King  |
		//Queen |
		//Rook  |
		//Bishop|
		//Knight|
		//Pawn
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//King
		public EnumLiteralDeclaration getKingEnumLiteralDeclaration_0() { return cKingEnumLiteralDeclaration_0; }
		
		public Keyword getKingKingKeyword_0_0() { return cKingKingKeyword_0_0; }
		
		//Queen
		public EnumLiteralDeclaration getQueenEnumLiteralDeclaration_1() { return cQueenEnumLiteralDeclaration_1; }
		
		public Keyword getQueenQueenKeyword_1_0() { return cQueenQueenKeyword_1_0; }
		
		//Rook
		public EnumLiteralDeclaration getRookEnumLiteralDeclaration_2() { return cRookEnumLiteralDeclaration_2; }
		
		public Keyword getRookRookKeyword_2_0() { return cRookRookKeyword_2_0; }
		
		//Bishop
		public EnumLiteralDeclaration getBishopEnumLiteralDeclaration_3() { return cBishopEnumLiteralDeclaration_3; }
		
		public Keyword getBishopBishopKeyword_3_0() { return cBishopBishopKeyword_3_0; }
		
		//Knight
		public EnumLiteralDeclaration getKnightEnumLiteralDeclaration_4() { return cKnightEnumLiteralDeclaration_4; }
		
		public Keyword getKnightKnightKeyword_4_0() { return cKnightKnightKeyword_4_0; }
		
		//Pawn
		public EnumLiteralDeclaration getPawnEnumLiteralDeclaration_5() { return cPawnEnumLiteralDeclaration_5; }
		
		public Keyword getPawnPawnKeyword_5_0() { return cPawnPawnKeyword_5_0; }
	}
	
	private final ModelElements pModel;
	private final GameElements pGame;
	private final PlayerElements pPlayer;
	private final InitialStateElements pInitialState;
	private final CustomPositionsElements pCustomPositions;
	private final PlacementElements pPlacement;
	private final CustomPieceElements pCustomPiece;
	private final MovePairElements pMovePair;
	private final TerminalRule tMOVENUMBER;
	private final AnyMoveElements pAnyMove;
	private final DSLMoveElements pDSLMove;
	private final DummyElements pDummy;
	private final MoveElements pMove;
	private final CaptureElements pCapture;
	private final CastleElements pCastle;
	private final EnPassantElements pEnPassant;
	private final PromotionElements pPromotion;
	private final RemarkElements eRemark;
	private final SANMoveElements pSANMove;
	private final SANCastleElements pSANCastle;
	private final SANNormalElements pSANNormal;
	private final SANPieceElements pSANPiece;
	private final SANDisambiguationElements pSANDisambiguation;
	private final SANPromotionElements pSANPromotion;
	private final SANCheckMarkerElements pSANCheckMarker;
	private final SANCaptureElements pSANCapture;
	private final SANRemarkElements pSANRemark;
	private final TerminalRule tLETTER;
	private final TerminalRule tRANKDIGIT;
	private final ConclusionElements pConclusion;
	private final MethodElements pMethod;
	private final WinElements pWin;
	private final TimeUpElements pTimeUp;
	private final ResignElements pResign;
	private final CheckmateElements pCheckmate;
	private final DrawElements pDraw;
	private final StalemateElements pStalemate;
	private final ThreefoldElements pThreefold;
	private final FiftyElements pFifty;
	private final AgreeElements pAgree;
	private final ResultElements pResult;
	private final PlayerOrColorElements pPlayerOrColor;
	private final ColorElements eColor;
	private final PieceElements ePiece;
	private final SquareElements pSquare;
	private final TerminalRule tSQUARETERMINAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ChessDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGame = new GameElements();
		this.pPlayer = new PlayerElements();
		this.pInitialState = new InitialStateElements();
		this.pCustomPositions = new CustomPositionsElements();
		this.pPlacement = new PlacementElements();
		this.pCustomPiece = new CustomPieceElements();
		this.pMovePair = new MovePairElements();
		this.tMOVENUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.MOVENUMBER");
		this.pAnyMove = new AnyMoveElements();
		this.pDSLMove = new DSLMoveElements();
		this.pDummy = new DummyElements();
		this.pMove = new MoveElements();
		this.pCapture = new CaptureElements();
		this.pCastle = new CastleElements();
		this.pEnPassant = new EnPassantElements();
		this.pPromotion = new PromotionElements();
		this.eRemark = new RemarkElements();
		this.pSANMove = new SANMoveElements();
		this.pSANCastle = new SANCastleElements();
		this.pSANNormal = new SANNormalElements();
		this.pSANPiece = new SANPieceElements();
		this.pSANDisambiguation = new SANDisambiguationElements();
		this.pSANPromotion = new SANPromotionElements();
		this.pSANCheckMarker = new SANCheckMarkerElements();
		this.pSANCapture = new SANCaptureElements();
		this.pSANRemark = new SANRemarkElements();
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.LETTER");
		this.tRANKDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.RANKDIGIT");
		this.pConclusion = new ConclusionElements();
		this.pMethod = new MethodElements();
		this.pWin = new WinElements();
		this.pTimeUp = new TimeUpElements();
		this.pResign = new ResignElements();
		this.pCheckmate = new CheckmateElements();
		this.pDraw = new DrawElements();
		this.pStalemate = new StalemateElements();
		this.pThreefold = new ThreefoldElements();
		this.pFifty = new FiftyElements();
		this.pAgree = new AgreeElements();
		this.pResult = new ResultElements();
		this.pPlayerOrColor = new PlayerOrColorElements();
		this.eColor = new ColorElements();
		this.ePiece = new PieceElements();
		this.pSquare = new SquareElements();
		this.tSQUARETERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SQUARETERMINAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    game=Game
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Game:
	//    'Game' title=STRING
	//    ('Players:' players+=Player+)?
	//    (initial=InitialState)?
	//    'Moves:'
	//        moves+=MovePair*
	//    'end'
	//    (conclusion=Conclusion)?
	//;
	public GameElements getGameAccess() {
		return pGame;
	}
	
	public ParserRule getGameRule() {
		return getGameAccess().getRule();
	}
	
	//Player:
	//    color=Color ':' name=STRING
	//;
	public PlayerElements getPlayerAccess() {
		return pPlayer;
	}
	
	public ParserRule getPlayerRule() {
		return getPlayerAccess().getRule();
	}
	
	//InitialState:
	//    {InitialState}
	//    'InitialState' ('fresh' | 'custom' positions=CustomPositions)?
	//;
	public InitialStateElements getInitialStateAccess() {
		return pInitialState;
	}
	
	public ParserRule getInitialStateRule() {
		return getInitialStateAccess().getRule();
	}
	
	//CustomPositions:
	//    {CustomPositions}
	//    'Positions:' '{'
	//        (placement+=Placement)*
	//    '}'
	//;
	public CustomPositionsElements getCustomPositionsAccess() {
		return pCustomPositions;
	}
	
	public ParserRule getCustomPositionsRule() {
		return getCustomPositionsAccess().getRule();
	}
	
	//Placement:
	//    //e.g., "WhiteKing on e1" or "BlackPawn = a7"
	//    piece=CustomPiece ('=' | 'on') square=Square
	//;
	public PlacementElements getPlacementAccess() {
		return pPlacement;
	}
	
	public ParserRule getPlacementRule() {
		return getPlacementAccess().getRule();
	}
	
	//CustomPiece:
	//    (color=Color)
	//    (kind=Piece)
	//;
	public CustomPieceElements getCustomPieceAccess() {
		return pCustomPiece;
	}
	
	public ParserRule getCustomPieceRule() {
		return getCustomPieceAccess().getRule();
	}
	
	//MovePair:
	//    //whiteMove can also be '...' when Black plays first in the position
	//    //or from where the records start. blackMove is optional depending on
	//    //where the records end or how the game itself ends
	//    moveNumber=MOVENUMBER
	//    (((color1=[PlayerOrColor])? whiteMove=AnyMove )| "...")
	//    ((color2=[PlayerOrColor])? blackMove=AnyMove)?
	//;
	public MovePairElements getMovePairAccess() {
		return pMovePair;
	}
	
	public ParserRule getMovePairRule() {
		return getMovePairAccess().getRule();
	}
	
	//terminal MOVENUMBER returns ecore::EString:
	//    ('0'..'9')+ "."
	//;
	public TerminalRule getMOVENUMBERRule() {
		return tMOVENUMBER;
	}
	
	//AnyMove:
	//    //for possible extensions to the language
	//    move=DSLMove ('(' remarks+=Remark* ')')? |
	//    //An extension of the language, experimental
	//    algebraicmove=SANMove
	//;
	public AnyMoveElements getAnyMoveAccess() {
		return pAnyMove;
	}
	
	public ParserRule getAnyMoveRule() {
		return getAnyMoveAccess().getRule();
	}
	
	//DSLMove:
	//    (Move | Capture | Castle | EnPassant | Promotion | Dummy)
	//;
	public DSLMoveElements getDSLMoveAccess() {
		return pDSLMove;
	}
	
	public ParserRule getDSLMoveRule() {
		return getDSLMoveAccess().getRule();
	}
	
	//Dummy:
	//    {Dummy}
	//    'dummy'
	//;
	public DummyElements getDummyAccess() {
		return pDummy;
	}
	
	public ParserRule getDummyRule() {
		return getDummyAccess().getRule();
	}
	
	//Move:
	//    //Pawn(e2 -> e4), Knight from b1 to c3, etc.
	//    ('moves')?
	//    (piece=Piece)
	//    ('(' from=Square '->' to=Square ')'|
	//    'from' from=Square 'to' to=Square
	//    )
	//;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//Capture:
	//    //An extension of a regular Move
	//    move=Move
	//    (('Capture(' capture=Piece ')')|
	//    (('and')? 'captures' capture=Piece))
	//;
	public CaptureElements getCaptureAccess() {
		return pCapture;
	}
	
	public ParserRule getCaptureRule() {
		return getCaptureAccess().getRule();
	}
	
	//Castle:
	//    ('Castle(' side=('Kingside'|'Queenside') ')')|
	//    ('castles' ('on' 'the')? side=('Kingside'|'Queenside'))|
	//    (move=Move 'Castle(' side=('Kingside'|'Queenside') ')')|
	//    (move=Move 'and' 'castles' side=('Kingside'|'Queenside'))
	//;
	public CastleElements getCastleAccess() {
		return pCastle;
	}
	
	public ParserRule getCastleRule() {
		return getCastleAccess().getRule();
	}
	
	//EnPassant:
	//    //An extension of a Capture
	//    capture=Capture 'on' square=Square
	//;
	public EnPassantElements getEnPassantAccess() {
		return pEnPassant;
	}
	
	public ParserRule getEnPassantRule() {
		return getEnPassantAccess().getRule();
	}
	
	//Promotion:
	//    //e.g., promotes pawn to Queen on e8,
	//    //
	//    move=(Move|Capture) 'Promotion(' piece=Piece ')'
	//;
	public PromotionElements getPromotionAccess() {
		return pPromotion;
	}
	
	public ParserRule getPromotionRule() {
		return getPromotionAccess().getRule();
	}
	
	//enum Remark:
	//    Good |
	//    Bad |
	//    Excellent |
	//    Risky |
	//    Dubious |
	//    Check |
	//    Checkmate
	//;
	public RemarkElements getRemarkAccess() {
		return eRemark;
	}
	
	public EnumRule getRemarkRule() {
		return getRemarkAccess().getRule();
	}
	
	///**
	// * SanMove and Related Implementations in this segment
	// */
	// SANMove returns SANMove:
	//    {SANMove}
	//    ( castle=SANCastle | normal=SANNormal )
	//;
	public SANMoveElements getSANMoveAccess() {
		return pSANMove;
	}
	
	public ParserRule getSANMoveRule() {
		return getSANMoveAccess().getRule();
	}
	
	//SANCastle returns SANCastle:
	//    {SANCastle}
	//    ( "O-O-O"  side = "Queenside"  )|
	//    ( "O-O"  side = "Kingside" )
	//;
	public SANCastleElements getSANCastleAccess() {
		return pSANCastle;
	}
	
	public ParserRule getSANCastleRule() {
		return getSANCastleAccess().getRule();
	}
	
	//SANNormal returns SANNormal:
	//    {SANNormal}
	//    piece=SANPiece? disamb=SANDisambiguation? capture=SANCapture? target=Square promotion=SANPromotion? check=SANCheckMarker?
	//    remark=SANRemark?
	//;
	public SANNormalElements getSANNormalAccess() {
		return pSANNormal;
	}
	
	public ParserRule getSANNormalRule() {
		return getSANNormalAccess().getRule();
	}
	
	//SANPiece:
	//    {SANPiece}
	//    ('K' | 'Q' | 'R' | 'B' | 'N')
	//;
	public SANPieceElements getSANPieceAccess() {
		return pSANPiece;
	}
	
	public ParserRule getSANPieceRule() {
		return getSANPieceAccess().getRule();
	}
	
	//SANDisambiguation hidden():
	//    {SANDisambiguation}
	//    (LETTER | RANKDIGIT)+
	//;
	public SANDisambiguationElements getSANDisambiguationAccess() {
		return pSANDisambiguation;
	}
	
	public ParserRule getSANDisambiguationRule() {
		return getSANDisambiguationAccess().getRule();
	}
	
	//SANPromotion returns SANPromotion:
	//    {SANPromotion}
	//    '=' ('Q' | 'R' | 'B' | 'N')
	//;
	public SANPromotionElements getSANPromotionAccess() {
		return pSANPromotion;
	}
	
	public ParserRule getSANPromotionRule() {
		return getSANPromotionAccess().getRule();
	}
	
	//SANCheckMarker returns SANCheckMarker:
	//    {SANCheckMarker}
	//    ('+' | '#')+
	//;
	public SANCheckMarkerElements getSANCheckMarkerAccess() {
		return pSANCheckMarker;
	}
	
	public ParserRule getSANCheckMarkerRule() {
		return getSANCheckMarkerAccess().getRule();
	}
	
	//SANCapture:
	//    {SANCapture}
	//    'x'
	//;
	public SANCaptureElements getSANCaptureAccess() {
		return pSANCapture;
	}
	
	public ParserRule getSANCaptureRule() {
		return getSANCaptureAccess().getRule();
	}
	
	//SANRemark returns SANRemark:
	//    {SANRemark}
	//    ('!'|'?')+
	//;
	public SANRemarkElements getSANRemarkAccess() {
		return pSANRemark;
	}
	
	public ParserRule getSANRemarkRule() {
		return getSANRemarkAccess().getRule();
	}
	
	//terminal LETTER: ('a'..'h'|'A'..'H');
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal RANKDIGIT: ('1'..'8');
	public TerminalRule getRANKDIGITRule() {
		return tRANKDIGIT;
	}
	
	// //End segment
	//Conclusion:
	//    (method=Method)? result=Result
	//;
	public ConclusionElements getConclusionAccess() {
		return pConclusion;
	}
	
	public ParserRule getConclusionRule() {
		return getConclusionAccess().getRule();
	}
	
	//Method:
	//    (win = Win )|
	//    (draw = Draw)
	//;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Win:
	//    (time = TimeUp) |
	//    (resign = Resign) |
	//    (mate = Checkmate)
	//;
	public WinElements getWinAccess() {
		return pWin;
	}
	
	public ParserRule getWinRule() {
		return getWinAccess().getRule();
	}
	
	//TimeUp:
	//    player=PlayerOrColor 'ran' 'out' 'of' 'time'
	//;
	public TimeUpElements getTimeUpAccess() {
		return pTimeUp;
	}
	
	public ParserRule getTimeUpRule() {
		return getTimeUpAccess().getRule();
	}
	
	//Resign:
	//    player=PlayerOrColor 'resigned'
	//;
	public ResignElements getResignAccess() {
		return pResign;
	}
	
	public ParserRule getResignRule() {
		return getResignAccess().getRule();
	}
	
	//Checkmate:
	//    player1=PlayerOrColor 'checkmated' player2=PlayerOrColor
	//;
	public CheckmateElements getCheckmateAccess() {
		return pCheckmate;
	}
	
	public ParserRule getCheckmateRule() {
		return getCheckmateAccess().getRule();
	}
	
	//Draw:
	//    player1=PlayerOrColor 'and' player2=PlayerOrColor
	//    result=(Stalemate|Threefold|Fifty|Agree)
	//;
	public DrawElements getDrawAccess() {
		return pDraw;
	}
	
	public ParserRule getDrawRule() {
		return getDrawAccess().getRule();
	}
	
	//Stalemate returns EString:
	//    'ended' 'the' 'game' 'in' 'a' 'stalemate'
	//;
	public StalemateElements getStalemateAccess() {
		return pStalemate;
	}
	
	public ParserRule getStalemateRule() {
		return getStalemateAccess().getRule();
	}
	
	//Threefold returns EString:
	//    'repeated' 'a' 'position' 'three' 'times'
	//;
	public ThreefoldElements getThreefoldAccess() {
		return pThreefold;
	}
	
	public ParserRule getThreefoldRule() {
		return getThreefoldAccess().getRule();
	}
	
	//Fifty returns EString:
	//    'played' 'fifty' 'moves' 'without' 'a' 'capture'
	//;
	public FiftyElements getFiftyAccess() {
		return pFifty;
	}
	
	public ParserRule getFiftyRule() {
		return getFiftyAccess().getRule();
	}
	
	//Agree returns EString:
	//    'agreed' 'to' 'a' 'draw'
	//;
	public AgreeElements getAgreeAccess() {
		return pAgree;
	}
	
	public ParserRule getAgreeRule() {
		return getAgreeAccess().getRule();
	}
	
	//Result:
	//    ((player=[Player]|color=Color) 'wins')|
	//    ('draw')
	//;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//PlayerOrColor:
	//    (player = [Player]) |
	//    (color = Color)
	//;
	public PlayerOrColorElements getPlayerOrColorAccess() {
		return pPlayerOrColor;
	}
	
	public ParserRule getPlayerOrColorRule() {
		return getPlayerOrColorAccess().getRule();
	}
	
	//enum Color:
	//    White | Black
	//;
	public ColorElements getColorAccess() {
		return eColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//enum Piece:
	//    King  |
	//    Queen |
	//    Rook  |
	//    Bishop|
	//    Knight|
	//    Pawn
	//;
	public PieceElements getPieceAccess() {
		return ePiece;
	}
	
	public EnumRule getPieceRule() {
		return getPieceAccess().getRule();
	}
	
	//Square:
	//    square=SQUARETERMINAL
	//;
	public SquareElements getSquareAccess() {
		return pSquare;
	}
	
	public ParserRule getSquareRule() {
		return getSquareAccess().getRule();
	}
	
	//terminal SQUARETERMINAL:
	//    LETTER RANKDIGIT
	//;
	public TerminalRule getSQUARETERMINALRule() {
		return tSQUARETERMINAL;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
