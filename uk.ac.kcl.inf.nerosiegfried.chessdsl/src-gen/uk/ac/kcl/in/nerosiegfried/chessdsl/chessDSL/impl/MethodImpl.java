/**
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.ChessDSLPackage;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Draw;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Method;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Win;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Method</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.MethodImpl#getWin <em>Win</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.MethodImpl#getDraw <em>Draw</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodImpl extends MinimalEObjectImpl.Container implements Method
{
  /**
   * The cached value of the '{@link #getWin() <em>Win</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWin()
   * @generated
   * @ordered
   */
  protected Win win;

  /**
   * The cached value of the '{@link #getDraw() <em>Draw</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDraw()
   * @generated
   * @ordered
   */
  protected Draw draw;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ChessDSLPackage.Literals.METHOD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Win getWin()
  {
    return win;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWin(Win newWin, NotificationChain msgs)
  {
    Win oldWin = win;
    win = newWin;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.METHOD__WIN, oldWin, newWin);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWin(Win newWin)
  {
    if (newWin != win)
    {
      NotificationChain msgs = null;
      if (win != null)
        msgs = ((InternalEObject)win).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.METHOD__WIN, null, msgs);
      if (newWin != null)
        msgs = ((InternalEObject)newWin).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.METHOD__WIN, null, msgs);
      msgs = basicSetWin(newWin, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.METHOD__WIN, newWin, newWin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Draw getDraw()
  {
    return draw;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDraw(Draw newDraw, NotificationChain msgs)
  {
    Draw oldDraw = draw;
    draw = newDraw;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.METHOD__DRAW, oldDraw, newDraw);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDraw(Draw newDraw)
  {
    if (newDraw != draw)
    {
      NotificationChain msgs = null;
      if (draw != null)
        msgs = ((InternalEObject)draw).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.METHOD__DRAW, null, msgs);
      if (newDraw != null)
        msgs = ((InternalEObject)newDraw).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.METHOD__DRAW, null, msgs);
      msgs = basicSetDraw(newDraw, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.METHOD__DRAW, newDraw, newDraw));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ChessDSLPackage.METHOD__WIN:
        return basicSetWin(null, msgs);
      case ChessDSLPackage.METHOD__DRAW:
        return basicSetDraw(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ChessDSLPackage.METHOD__WIN:
        return getWin();
      case ChessDSLPackage.METHOD__DRAW:
        return getDraw();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ChessDSLPackage.METHOD__WIN:
        setWin((Win)newValue);
        return;
      case ChessDSLPackage.METHOD__DRAW:
        setDraw((Draw)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.METHOD__WIN:
        setWin((Win)null);
        return;
      case ChessDSLPackage.METHOD__DRAW:
        setDraw((Draw)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.METHOD__WIN:
        return win != null;
      case ChessDSLPackage.METHOD__DRAW:
        return draw != null;
    }
    return super.eIsSet(featureID);
  }

} //MethodImpl
