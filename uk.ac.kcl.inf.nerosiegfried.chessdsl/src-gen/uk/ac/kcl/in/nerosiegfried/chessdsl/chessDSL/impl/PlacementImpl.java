/**
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.ChessDSLPackage;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.CustomPiece;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Placement;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Square;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Placement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.PlacementImpl#getPiece <em>Piece</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.PlacementImpl#getSquare <em>Square</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PlacementImpl extends MinimalEObjectImpl.Container implements Placement
{
  /**
   * The cached value of the '{@link #getPiece() <em>Piece</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPiece()
   * @generated
   * @ordered
   */
  protected CustomPiece piece;

  /**
   * The cached value of the '{@link #getSquare() <em>Square</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSquare()
   * @generated
   * @ordered
   */
  protected Square square;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PlacementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ChessDSLPackage.Literals.PLACEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustomPiece getPiece()
  {
    return piece;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPiece(CustomPiece newPiece, NotificationChain msgs)
  {
    CustomPiece oldPiece = piece;
    piece = newPiece;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.PLACEMENT__PIECE, oldPiece, newPiece);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPiece(CustomPiece newPiece)
  {
    if (newPiece != piece)
    {
      NotificationChain msgs = null;
      if (piece != null)
        msgs = ((InternalEObject)piece).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.PLACEMENT__PIECE, null, msgs);
      if (newPiece != null)
        msgs = ((InternalEObject)newPiece).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.PLACEMENT__PIECE, null, msgs);
      msgs = basicSetPiece(newPiece, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.PLACEMENT__PIECE, newPiece, newPiece));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Square getSquare()
  {
    return square;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSquare(Square newSquare, NotificationChain msgs)
  {
    Square oldSquare = square;
    square = newSquare;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.PLACEMENT__SQUARE, oldSquare, newSquare);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSquare(Square newSquare)
  {
    if (newSquare != square)
    {
      NotificationChain msgs = null;
      if (square != null)
        msgs = ((InternalEObject)square).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.PLACEMENT__SQUARE, null, msgs);
      if (newSquare != null)
        msgs = ((InternalEObject)newSquare).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.PLACEMENT__SQUARE, null, msgs);
      msgs = basicSetSquare(newSquare, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.PLACEMENT__SQUARE, newSquare, newSquare));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ChessDSLPackage.PLACEMENT__PIECE:
        return basicSetPiece(null, msgs);
      case ChessDSLPackage.PLACEMENT__SQUARE:
        return basicSetSquare(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ChessDSLPackage.PLACEMENT__PIECE:
        return getPiece();
      case ChessDSLPackage.PLACEMENT__SQUARE:
        return getSquare();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ChessDSLPackage.PLACEMENT__PIECE:
        setPiece((CustomPiece)newValue);
        return;
      case ChessDSLPackage.PLACEMENT__SQUARE:
        setSquare((Square)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.PLACEMENT__PIECE:
        setPiece((CustomPiece)null);
        return;
      case ChessDSLPackage.PLACEMENT__SQUARE:
        setSquare((Square)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.PLACEMENT__PIECE:
        return piece != null;
      case ChessDSLPackage.PLACEMENT__SQUARE:
        return square != null;
    }
    return super.eIsSet(featureID);
  }

} //PlacementImpl
