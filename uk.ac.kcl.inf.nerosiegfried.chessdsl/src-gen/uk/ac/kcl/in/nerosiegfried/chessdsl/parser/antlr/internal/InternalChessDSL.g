/*
 * generated by Xtext 2.37.0
 */
grammar InternalChessDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.in.nerosiegfried.chessdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.in.nerosiegfried.chessdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.in.nerosiegfried.chessdsl.services.ChessDSLGrammarAccess;

}

@parser::members {

 	private ChessDSLGrammarAccess grammarAccess;

    public InternalChessDSLParser(TokenStream input, ChessDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ChessDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGameGameParserRuleCall_0());
			}
			lv_game_0_0=ruleGame
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"game",
					lv_game_0_0,
					"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Game");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleGame
entryRuleGame returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGameRule()); }
	iv_ruleGame=ruleGame
	{ $current=$iv_ruleGame.current; }
	EOF;

// Rule Game
ruleGame returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Game'
		{
			newLeafNode(otherlv_0, grammarAccess.getGameAccess().getGameKeyword_0());
		}
		(
			(
				lv_title_1_0=RULE_STRING
				{
					newLeafNode(lv_title_1_0, grammarAccess.getGameAccess().getTitleSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGameRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2='Players:'
			{
				newLeafNode(otherlv_2, grammarAccess.getGameAccess().getPlayersKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGameAccess().getPlayersPlayerParserRuleCall_2_1_0());
					}
					lv_players_3_0=rulePlayer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGameRule());
						}
						add(
							$current,
							"players",
							lv_players_3_0,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Player");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getGameAccess().getInitialInitialStateParserRuleCall_3_0());
				}
				lv_initial_4_0=ruleInitialState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGameRule());
					}
					set(
						$current,
						"initial",
						lv_initial_4_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.InitialState");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='Moves:'
		{
			newLeafNode(otherlv_5, grammarAccess.getGameAccess().getMovesKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGameAccess().getMovesMovePairParserRuleCall_5_0());
				}
				lv_moves_6_0=ruleMovePair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGameRule());
					}
					add(
						$current,
						"moves",
						lv_moves_6_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.MovePair");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getGameAccess().getEndKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGameAccess().getConclusionConclusionParserRuleCall_7_0());
				}
				lv_conclusion_8_0=ruleConclusion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGameRule());
					}
					set(
						$current,
						"conclusion",
						lv_conclusion_8_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Conclusion");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePlayer
entryRulePlayer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlayerRule()); }
	iv_rulePlayer=rulePlayer
	{ $current=$iv_rulePlayer.current; }
	EOF;

// Rule Player
rulePlayer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPlayerAccess().getColorColorEnumRuleCall_0_0());
				}
				lv_color_0_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlayerRule());
					}
					set(
						$current,
						"color",
						lv_color_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPlayerAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPlayerAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPlayerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleInitialState
entryRuleInitialState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialStateRule()); }
	iv_ruleInitialState=ruleInitialState
	{ $current=$iv_ruleInitialState.current; }
	EOF;

// Rule InitialState
ruleInitialState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInitialStateAccess().getInitialStateAction_0(),
					$current);
			}
		)
		otherlv_1='InitialState'
		{
			newLeafNode(otherlv_1, grammarAccess.getInitialStateAccess().getInitialStateKeyword_1());
		}
		(
			otherlv_2='fresh'
			{
				newLeafNode(otherlv_2, grammarAccess.getInitialStateAccess().getFreshKeyword_2_0());
			}
			    |
			(
				otherlv_3='custom'
				{
					newLeafNode(otherlv_3, grammarAccess.getInitialStateAccess().getCustomKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInitialStateAccess().getPositionsCustomPositionsParserRuleCall_2_1_1_0());
						}
						lv_positions_4_0=ruleCustomPositions
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInitialStateRule());
							}
							set(
								$current,
								"positions",
								lv_positions_4_0,
								"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.CustomPositions");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleCustomPositions
entryRuleCustomPositions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomPositionsRule()); }
	iv_ruleCustomPositions=ruleCustomPositions
	{ $current=$iv_ruleCustomPositions.current; }
	EOF;

// Rule CustomPositions
ruleCustomPositions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCustomPositionsAccess().getCustomPositionsAction_0(),
					$current);
			}
		)
		otherlv_1='Positions:'
		{
			newLeafNode(otherlv_1, grammarAccess.getCustomPositionsAccess().getPositionsKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCustomPositionsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomPositionsAccess().getPlacementPlacementParserRuleCall_3_0());
				}
				lv_placement_3_0=rulePlacement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomPositionsRule());
					}
					add(
						$current,
						"placement",
						lv_placement_3_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Placement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getCustomPositionsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRulePlacement
entryRulePlacement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlacementRule()); }
	iv_rulePlacement=rulePlacement
	{ $current=$iv_rulePlacement.current; }
	EOF;

// Rule Placement
rulePlacement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPlacementAccess().getPieceCustomPieceParserRuleCall_0_0());
				}
				lv_piece_0_0=ruleCustomPiece
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlacementRule());
					}
					set(
						$current,
						"piece",
						lv_piece_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.CustomPiece");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getPlacementAccess().getEqualsSignKeyword_1_0());
			}
			    |
			otherlv_2='on'
			{
				newLeafNode(otherlv_2, grammarAccess.getPlacementAccess().getOnKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPlacementAccess().getSquareSquareParserRuleCall_2_0());
				}
				lv_square_3_0=ruleSquare
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlacementRule());
					}
					set(
						$current,
						"square",
						lv_square_3_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Square");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCustomPiece
entryRuleCustomPiece returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomPieceRule()); }
	iv_ruleCustomPiece=ruleCustomPiece
	{ $current=$iv_ruleCustomPiece.current; }
	EOF;

// Rule CustomPiece
ruleCustomPiece returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomPieceAccess().getColorColorEnumRuleCall_0_0());
				}
				lv_color_0_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomPieceRule());
					}
					set(
						$current,
						"color",
						lv_color_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomPieceAccess().getKindPieceEnumRuleCall_1_0());
				}
				lv_kind_1_0=rulePiece
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomPieceRule());
					}
					set(
						$current,
						"kind",
						lv_kind_1_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Piece");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMovePair
entryRuleMovePair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMovePairRule()); }
	iv_ruleMovePair=ruleMovePair
	{ $current=$iv_ruleMovePair.current; }
	EOF;

// Rule MovePair
ruleMovePair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_moveNumber_0_0=RULE_MOVENUMBER
				{
					newLeafNode(lv_moveNumber_0_0, grammarAccess.getMovePairAccess().getMoveNumberMOVENUMBERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMovePairRule());
					}
					setWithLastConsumed(
						$current,
						"moveNumber",
						lv_moveNumber_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.MOVENUMBER");
				}
			)
		)
		(
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMovePairRule());
							}
						}
						otherlv_1=RULE_ID
						{
							newLeafNode(otherlv_1, grammarAccess.getMovePairAccess().getColor1PlayerOrColorCrossReference_1_0_0_0());
						}
					)
				)?
				(
					(
						{
							newCompositeNode(grammarAccess.getMovePairAccess().getWhiteMoveAnyMoveParserRuleCall_1_0_1_0());
						}
						lv_whiteMove_2_0=ruleAnyMove
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMovePairRule());
							}
							set(
								$current,
								"whiteMove",
								lv_whiteMove_2_0,
								"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.AnyMove");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			otherlv_3='...'
			{
				newLeafNode(otherlv_3, grammarAccess.getMovePairAccess().getFullStopFullStopFullStopKeyword_1_1());
			}
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMovePairRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getMovePairAccess().getColor2PlayerOrColorCrossReference_2_0_0());
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getMovePairAccess().getBlackMoveAnyMoveParserRuleCall_2_1_0());
					}
					lv_blackMove_5_0=ruleAnyMove
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMovePairRule());
						}
						set(
							$current,
							"blackMove",
							lv_blackMove_5_0,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.AnyMove");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAnyMove
entryRuleAnyMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnyMoveRule()); }
	iv_ruleAnyMove=ruleAnyMove
	{ $current=$iv_ruleAnyMove.current; }
	EOF;

// Rule AnyMove
ruleAnyMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAnyMoveAccess().getAlgebraicmoveEscaped_SANMoveParserRuleCall_0_0());
				}
				lv_algebraicmove_0_0=ruleEscaped_SANMove
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnyMoveRule());
					}
					set(
						$current,
						"algebraicmove",
						lv_algebraicmove_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Escaped_SANMove");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAnyMoveAccess().getMoveDSLMoveParserRuleCall_1_0_0());
					}
					lv_move_1_0=ruleDSLMove
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnyMoveRule());
						}
						set(
							$current,
							"move",
							lv_move_1_0,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.DSLMove");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getAnyMoveAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAnyMoveAccess().getRemarksRemarkEnumRuleCall_1_1_1_0());
						}
						lv_remarks_3_0=ruleRemark
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAnyMoveRule());
							}
							add(
								$current,
								"remarks",
								lv_remarks_3_0,
								"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Remark");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getAnyMoveAccess().getRightParenthesisKeyword_1_1_2());
				}
			)?
		)
	)
;

// Entry rule entryRuleDSLMove
entryRuleDSLMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLMoveRule()); }
	iv_ruleDSLMove=ruleDSLMove
	{ $current=$iv_ruleDSLMove.current; }
	EOF;

// Rule DSLMove
ruleDSLMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDSLMoveAccess().getMoveParserRuleCall_0());
		}
		this_Move_0=ruleMove
		{
			$current = $this_Move_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLMoveAccess().getCaptureParserRuleCall_1());
		}
		this_Capture_1=ruleCapture
		{
			$current = $this_Capture_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLMoveAccess().getCastleParserRuleCall_2());
		}
		this_Castle_2=ruleCastle
		{
			$current = $this_Castle_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLMoveAccess().getEnPassantParserRuleCall_3());
		}
		this_EnPassant_3=ruleEnPassant
		{
			$current = $this_EnPassant_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLMoveAccess().getPromotionParserRuleCall_4());
		}
		this_Promotion_4=rulePromotion
		{
			$current = $this_Promotion_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLMoveAccess().getDummyParserRuleCall_5());
		}
		this_Dummy_5=ruleDummy
		{
			$current = $this_Dummy_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDummy
entryRuleDummy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDummyRule()); }
	iv_ruleDummy=ruleDummy
	{ $current=$iv_ruleDummy.current; }
	EOF;

// Rule Dummy
ruleDummy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDummyAccess().getDummyAction_0(),
					$current);
			}
		)
		otherlv_1='dummy'
		{
			newLeafNode(otherlv_1, grammarAccess.getDummyAccess().getDummyKeyword_1());
		}
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='moves'
			{
				newLeafNode(otherlv_0, grammarAccess.getMoveAccess().getMovesKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getPiecePieceEnumRuleCall_1_0());
				}
				lv_piece_1_0=rulePiece
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"piece",
						lv_piece_1_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Piece");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getMoveAccess().getLeftParenthesisKeyword_2_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMoveAccess().getFromSquareParserRuleCall_2_0_1_0());
						}
						lv_from_3_0=ruleSquare
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMoveRule());
							}
							set(
								$current,
								"from",
								lv_from_3_0,
								"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Square");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4='->'
				{
					newLeafNode(otherlv_4, grammarAccess.getMoveAccess().getHyphenMinusGreaterThanSignKeyword_2_0_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMoveAccess().getToSquareParserRuleCall_2_0_3_0());
						}
						lv_to_5_0=ruleSquare
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMoveRule());
							}
							set(
								$current,
								"to",
								lv_to_5_0,
								"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Square");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6=')'
				{
					newLeafNode(otherlv_6, grammarAccess.getMoveAccess().getRightParenthesisKeyword_2_0_4());
				}
			)
			    |
			(
				otherlv_7='from'
				{
					newLeafNode(otherlv_7, grammarAccess.getMoveAccess().getFromKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMoveAccess().getFromSquareParserRuleCall_2_1_1_0());
						}
						lv_from_8_0=ruleSquare
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMoveRule());
							}
							set(
								$current,
								"from",
								lv_from_8_0,
								"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Square");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_9='to'
				{
					newLeafNode(otherlv_9, grammarAccess.getMoveAccess().getToKeyword_2_1_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMoveAccess().getToSquareParserRuleCall_2_1_3_0());
						}
						lv_to_10_0=ruleSquare
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMoveRule());
							}
							set(
								$current,
								"to",
								lv_to_10_0,
								"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Square");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleCapture
entryRuleCapture returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaptureRule()); }
	iv_ruleCapture=ruleCapture
	{ $current=$iv_ruleCapture.current; }
	EOF;

// Rule Capture
ruleCapture returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCaptureAccess().getMoveMoveParserRuleCall_0_0());
				}
				lv_move_0_0=ruleMove
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaptureRule());
					}
					set(
						$current,
						"move",
						lv_move_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Move");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='Capture('
				{
					newLeafNode(otherlv_1, grammarAccess.getCaptureAccess().getCaptureKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCaptureAccess().getCapturePieceEnumRuleCall_1_0_1_0());
						}
						lv_capture_2_0=rulePiece
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCaptureRule());
							}
							set(
								$current,
								"capture",
								lv_capture_2_0,
								"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Piece");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=')'
				{
					newLeafNode(otherlv_3, grammarAccess.getCaptureAccess().getRightParenthesisKeyword_1_0_2());
				}
			)
			    |
			(
				(
					otherlv_4='and'
					{
						newLeafNode(otherlv_4, grammarAccess.getCaptureAccess().getAndKeyword_1_1_0());
					}
				)?
				otherlv_5='captures'
				{
					newLeafNode(otherlv_5, grammarAccess.getCaptureAccess().getCapturesKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCaptureAccess().getCapturePieceEnumRuleCall_1_1_2_0());
						}
						lv_capture_6_0=rulePiece
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCaptureRule());
							}
							set(
								$current,
								"capture",
								lv_capture_6_0,
								"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Piece");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleCastle
entryRuleCastle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCastleRule()); }
	iv_ruleCastle=ruleCastle
	{ $current=$iv_ruleCastle.current; }
	EOF;

// Rule Castle
ruleCastle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Castle('
			{
				newLeafNode(otherlv_0, grammarAccess.getCastleAccess().getCastleKeyword_0_0());
			}
			(
				(
					(
						lv_side_1_1='Kingside'
						{
							newLeafNode(lv_side_1_1, grammarAccess.getCastleAccess().getSideKingsideKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCastleRule());
							}
							setWithLastConsumed($current, "side", lv_side_1_1, null);
						}
						    |
						lv_side_1_2='Queenside'
						{
							newLeafNode(lv_side_1_2, grammarAccess.getCastleAccess().getSideQueensideKeyword_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCastleRule());
							}
							setWithLastConsumed($current, "side", lv_side_1_2, null);
						}
					)
				)
			)
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getCastleAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			otherlv_3='castles'
			{
				newLeafNode(otherlv_3, grammarAccess.getCastleAccess().getCastlesKeyword_1_0());
			}
			(
				otherlv_4='on'
				{
					newLeafNode(otherlv_4, grammarAccess.getCastleAccess().getOnKeyword_1_1_0());
				}
				otherlv_5='the'
				{
					newLeafNode(otherlv_5, grammarAccess.getCastleAccess().getTheKeyword_1_1_1());
				}
			)?
			(
				(
					(
						lv_side_6_1='Kingside'
						{
							newLeafNode(lv_side_6_1, grammarAccess.getCastleAccess().getSideKingsideKeyword_1_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCastleRule());
							}
							setWithLastConsumed($current, "side", lv_side_6_1, null);
						}
						    |
						lv_side_6_2='Queenside'
						{
							newLeafNode(lv_side_6_2, grammarAccess.getCastleAccess().getSideQueensideKeyword_1_2_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCastleRule());
							}
							setWithLastConsumed($current, "side", lv_side_6_2, null);
						}
					)
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCastleAccess().getMoveMoveParserRuleCall_2_0_0());
					}
					lv_move_7_0=ruleMove
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCastleRule());
						}
						set(
							$current,
							"move",
							lv_move_7_0,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Move");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8='Castle('
			{
				newLeafNode(otherlv_8, grammarAccess.getCastleAccess().getCastleKeyword_2_1());
			}
			(
				(
					(
						lv_side_9_1='Kingside'
						{
							newLeafNode(lv_side_9_1, grammarAccess.getCastleAccess().getSideKingsideKeyword_2_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCastleRule());
							}
							setWithLastConsumed($current, "side", lv_side_9_1, null);
						}
						    |
						lv_side_9_2='Queenside'
						{
							newLeafNode(lv_side_9_2, grammarAccess.getCastleAccess().getSideQueensideKeyword_2_2_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCastleRule());
							}
							setWithLastConsumed($current, "side", lv_side_9_2, null);
						}
					)
				)
			)
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getCastleAccess().getRightParenthesisKeyword_2_3());
			}
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCastleAccess().getMoveMoveParserRuleCall_3_0_0());
					}
					lv_move_11_0=ruleMove
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCastleRule());
						}
						set(
							$current,
							"move",
							lv_move_11_0,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Move");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12='and'
			{
				newLeafNode(otherlv_12, grammarAccess.getCastleAccess().getAndKeyword_3_1());
			}
			otherlv_13='castles'
			{
				newLeafNode(otherlv_13, grammarAccess.getCastleAccess().getCastlesKeyword_3_2());
			}
			(
				(
					(
						lv_side_14_1='Kingside'
						{
							newLeafNode(lv_side_14_1, grammarAccess.getCastleAccess().getSideKingsideKeyword_3_3_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCastleRule());
							}
							setWithLastConsumed($current, "side", lv_side_14_1, null);
						}
						    |
						lv_side_14_2='Queenside'
						{
							newLeafNode(lv_side_14_2, grammarAccess.getCastleAccess().getSideQueensideKeyword_3_3_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCastleRule());
							}
							setWithLastConsumed($current, "side", lv_side_14_2, null);
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleEnPassant
entryRuleEnPassant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnPassantRule()); }
	iv_ruleEnPassant=ruleEnPassant
	{ $current=$iv_ruleEnPassant.current; }
	EOF;

// Rule EnPassant
ruleEnPassant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEnPassantAccess().getCaptureCaptureParserRuleCall_0_0());
				}
				lv_capture_0_0=ruleCapture
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnPassantRule());
					}
					set(
						$current,
						"capture",
						lv_capture_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Capture");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='on'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnPassantAccess().getOnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnPassantAccess().getSquareSquareParserRuleCall_2_0());
				}
				lv_square_2_0=ruleSquare
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnPassantRule());
					}
					set(
						$current,
						"square",
						lv_square_2_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Square");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePromotion
entryRulePromotion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPromotionRule()); }
	iv_rulePromotion=rulePromotion
	{ $current=$iv_rulePromotion.current; }
	EOF;

// Rule Promotion
rulePromotion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPromotionAccess().getMoveMoveParserRuleCall_0_0_0());
					}
					lv_move_0_1=ruleMove
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPromotionRule());
						}
						set(
							$current,
							"move",
							lv_move_0_1,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Move");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPromotionAccess().getMoveCaptureParserRuleCall_0_0_1());
					}
					lv_move_0_2=ruleCapture
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPromotionRule());
						}
						set(
							$current,
							"move",
							lv_move_0_2,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Capture");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_1='Promotion('
		{
			newLeafNode(otherlv_1, grammarAccess.getPromotionAccess().getPromotionKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPromotionAccess().getPiecePieceEnumRuleCall_2_0());
				}
				lv_piece_2_0=rulePiece
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPromotionRule());
					}
					set(
						$current,
						"piece",
						lv_piece_2_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Piece");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPromotionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleEscaped_SANMove
entryRuleEscaped_SANMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEscaped_SANMoveRule()); }
	iv_ruleEscaped_SANMove=ruleEscaped_SANMove
	{ $current=$iv_ruleEscaped_SANMove.current; }
	EOF;

// Rule Escaped_SANMove
ruleEscaped_SANMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEscaped_SANMoveAccess().getSANMoveAction_0(),
					$current);
			}
		)
		this_SAN_TOKEN_1=RULE_SAN_TOKEN
		{
			newLeafNode(this_SAN_TOKEN_1, grammarAccess.getEscaped_SANMoveAccess().getSAN_TOKENTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleConclusion
entryRuleConclusion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConclusionRule()); }
	iv_ruleConclusion=ruleConclusion
	{ $current=$iv_ruleConclusion.current; }
	EOF;

// Rule Conclusion
ruleConclusion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConclusionAccess().getMethodMethodParserRuleCall_0_0());
				}
				lv_method_0_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConclusionRule());
					}
					set(
						$current,
						"method",
						lv_method_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConclusionAccess().getResultResultParserRuleCall_1_0());
				}
				lv_result_1_0=ruleResult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConclusionRule());
					}
					set(
						$current,
						"result",
						lv_result_1_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Result");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getWinWinParserRuleCall_0_0());
				}
				lv_win_0_0=ruleWin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"win",
						lv_win_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Win");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getDrawDrawParserRuleCall_1_0());
				}
				lv_draw_1_0=ruleDraw
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"draw",
						lv_draw_1_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Draw");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWin
entryRuleWin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWinRule()); }
	iv_ruleWin=ruleWin
	{ $current=$iv_ruleWin.current; }
	EOF;

// Rule Win
ruleWin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWinAccess().getTimeTimeUpParserRuleCall_0_0());
				}
				lv_time_0_0=ruleTimeUp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWinRule());
					}
					set(
						$current,
						"time",
						lv_time_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.TimeUp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getWinAccess().getResignResignParserRuleCall_1_0());
				}
				lv_resign_1_0=ruleResign
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWinRule());
					}
					set(
						$current,
						"resign",
						lv_resign_1_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Resign");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getWinAccess().getMateCheckmateParserRuleCall_2_0());
				}
				lv_mate_2_0=ruleCheckmate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWinRule());
					}
					set(
						$current,
						"mate",
						lv_mate_2_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Checkmate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTimeUp
entryRuleTimeUp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeUpRule()); }
	iv_ruleTimeUp=ruleTimeUp
	{ $current=$iv_ruleTimeUp.current; }
	EOF;

// Rule TimeUp
ruleTimeUp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeUpAccess().getPlayerPlayerOrColorParserRuleCall_0_0());
				}
				lv_player_0_0=rulePlayerOrColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeUpRule());
					}
					set(
						$current,
						"player",
						lv_player_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.PlayerOrColor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='ran'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeUpAccess().getRanKeyword_1());
		}
		otherlv_2='out'
		{
			newLeafNode(otherlv_2, grammarAccess.getTimeUpAccess().getOutKeyword_2());
		}
		otherlv_3='of'
		{
			newLeafNode(otherlv_3, grammarAccess.getTimeUpAccess().getOfKeyword_3());
		}
		otherlv_4='time'
		{
			newLeafNode(otherlv_4, grammarAccess.getTimeUpAccess().getTimeKeyword_4());
		}
	)
;

// Entry rule entryRuleResign
entryRuleResign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResignRule()); }
	iv_ruleResign=ruleResign
	{ $current=$iv_ruleResign.current; }
	EOF;

// Rule Resign
ruleResign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getResignAccess().getPlayerPlayerOrColorParserRuleCall_0_0());
				}
				lv_player_0_0=rulePlayerOrColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResignRule());
					}
					set(
						$current,
						"player",
						lv_player_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.PlayerOrColor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='resigned'
		{
			newLeafNode(otherlv_1, grammarAccess.getResignAccess().getResignedKeyword_1());
		}
	)
;

// Entry rule entryRuleCheckmate
entryRuleCheckmate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckmateRule()); }
	iv_ruleCheckmate=ruleCheckmate
	{ $current=$iv_ruleCheckmate.current; }
	EOF;

// Rule Checkmate
ruleCheckmate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckmateAccess().getPlayer1PlayerOrColorParserRuleCall_0_0());
				}
				lv_player1_0_0=rulePlayerOrColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckmateRule());
					}
					set(
						$current,
						"player1",
						lv_player1_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.PlayerOrColor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='checkmated'
		{
			newLeafNode(otherlv_1, grammarAccess.getCheckmateAccess().getCheckmatedKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckmateAccess().getPlayer2PlayerOrColorParserRuleCall_2_0());
				}
				lv_player2_2_0=rulePlayerOrColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckmateRule());
					}
					set(
						$current,
						"player2",
						lv_player2_2_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.PlayerOrColor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDraw
entryRuleDraw returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDrawRule()); }
	iv_ruleDraw=ruleDraw
	{ $current=$iv_ruleDraw.current; }
	EOF;

// Rule Draw
ruleDraw returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDrawAccess().getPlayer1PlayerOrColorParserRuleCall_0_0());
				}
				lv_player1_0_0=rulePlayerOrColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDrawRule());
					}
					set(
						$current,
						"player1",
						lv_player1_0_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.PlayerOrColor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='and'
		{
			newLeafNode(otherlv_1, grammarAccess.getDrawAccess().getAndKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDrawAccess().getPlayer2PlayerOrColorParserRuleCall_2_0());
				}
				lv_player2_2_0=rulePlayerOrColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDrawRule());
					}
					set(
						$current,
						"player2",
						lv_player2_2_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.PlayerOrColor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDrawAccess().getResultStalemateParserRuleCall_3_0_0());
					}
					lv_result_3_1=ruleStalemate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDrawRule());
						}
						set(
							$current,
							"result",
							lv_result_3_1,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Stalemate");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDrawAccess().getResultThreefoldParserRuleCall_3_0_1());
					}
					lv_result_3_2=ruleThreefold
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDrawRule());
						}
						set(
							$current,
							"result",
							lv_result_3_2,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Threefold");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDrawAccess().getResultFiftyParserRuleCall_3_0_2());
					}
					lv_result_3_3=ruleFifty
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDrawRule());
						}
						set(
							$current,
							"result",
							lv_result_3_3,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Fifty");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDrawAccess().getResultAgreeParserRuleCall_3_0_3());
					}
					lv_result_3_4=ruleAgree
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDrawRule());
						}
						set(
							$current,
							"result",
							lv_result_3_4,
							"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Agree");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleStalemate
entryRuleStalemate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStalemateRule()); }
	iv_ruleStalemate=ruleStalemate
	{ $current=$iv_ruleStalemate.current; }
	EOF;

// Rule Stalemate
ruleStalemate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ended'
		{
			newLeafNode(otherlv_0, grammarAccess.getStalemateAccess().getEndedKeyword_0());
		}
		otherlv_1='the'
		{
			newLeafNode(otherlv_1, grammarAccess.getStalemateAccess().getTheKeyword_1());
		}
		otherlv_2='game'
		{
			newLeafNode(otherlv_2, grammarAccess.getStalemateAccess().getGameKeyword_2());
		}
		otherlv_3='in'
		{
			newLeafNode(otherlv_3, grammarAccess.getStalemateAccess().getInKeyword_3());
		}
		otherlv_4='a'
		{
			newLeafNode(otherlv_4, grammarAccess.getStalemateAccess().getAKeyword_4());
		}
		otherlv_5='stalemate'
		{
			newLeafNode(otherlv_5, grammarAccess.getStalemateAccess().getStalemateKeyword_5());
		}
	)
;

// Entry rule entryRuleThreefold
entryRuleThreefold returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThreefoldRule()); }
	iv_ruleThreefold=ruleThreefold
	{ $current=$iv_ruleThreefold.current; }
	EOF;

// Rule Threefold
ruleThreefold returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='repeated'
		{
			newLeafNode(otherlv_0, grammarAccess.getThreefoldAccess().getRepeatedKeyword_0());
		}
		otherlv_1='a'
		{
			newLeafNode(otherlv_1, grammarAccess.getThreefoldAccess().getAKeyword_1());
		}
		otherlv_2='position'
		{
			newLeafNode(otherlv_2, grammarAccess.getThreefoldAccess().getPositionKeyword_2());
		}
		otherlv_3='three'
		{
			newLeafNode(otherlv_3, grammarAccess.getThreefoldAccess().getThreeKeyword_3());
		}
		otherlv_4='times'
		{
			newLeafNode(otherlv_4, grammarAccess.getThreefoldAccess().getTimesKeyword_4());
		}
	)
;

// Entry rule entryRuleFifty
entryRuleFifty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFiftyRule()); }
	iv_ruleFifty=ruleFifty
	{ $current=$iv_ruleFifty.current; }
	EOF;

// Rule Fifty
ruleFifty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='played'
		{
			newLeafNode(otherlv_0, grammarAccess.getFiftyAccess().getPlayedKeyword_0());
		}
		otherlv_1='fifty'
		{
			newLeafNode(otherlv_1, grammarAccess.getFiftyAccess().getFiftyKeyword_1());
		}
		otherlv_2='moves'
		{
			newLeafNode(otherlv_2, grammarAccess.getFiftyAccess().getMovesKeyword_2());
		}
		otherlv_3='without'
		{
			newLeafNode(otherlv_3, grammarAccess.getFiftyAccess().getWithoutKeyword_3());
		}
		otherlv_4='a'
		{
			newLeafNode(otherlv_4, grammarAccess.getFiftyAccess().getAKeyword_4());
		}
		otherlv_5='capture'
		{
			newLeafNode(otherlv_5, grammarAccess.getFiftyAccess().getCaptureKeyword_5());
		}
	)
;

// Entry rule entryRuleAgree
entryRuleAgree returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgreeRule()); }
	iv_ruleAgree=ruleAgree
	{ $current=$iv_ruleAgree.current; }
	EOF;

// Rule Agree
ruleAgree returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='agreed'
		{
			newLeafNode(otherlv_0, grammarAccess.getAgreeAccess().getAgreedKeyword_0());
		}
		otherlv_1='to'
		{
			newLeafNode(otherlv_1, grammarAccess.getAgreeAccess().getToKeyword_1());
		}
		otherlv_2='a'
		{
			newLeafNode(otherlv_2, grammarAccess.getAgreeAccess().getAKeyword_2());
		}
		otherlv_3='draw'
		{
			newLeafNode(otherlv_3, grammarAccess.getAgreeAccess().getDrawKeyword_3());
		}
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current; }
	EOF;

// Rule Result
ruleResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getResultRule());
							}
						}
						otherlv_0=RULE_ID
						{
							newLeafNode(otherlv_0, grammarAccess.getResultAccess().getPlayerPlayerCrossReference_0_0_0_0());
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getResultAccess().getColorColorEnumRuleCall_0_0_1_0());
						}
						lv_color_1_0=ruleColor
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getResultRule());
							}
							set(
								$current,
								"color",
								lv_color_1_0,
								"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Color");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_2='wins'
			{
				newLeafNode(otherlv_2, grammarAccess.getResultAccess().getWinsKeyword_0_1());
			}
		)
		    |
		otherlv_3='draw'
		{
			newLeafNode(otherlv_3, grammarAccess.getResultAccess().getDrawKeyword_1());
		}
	)
;

// Entry rule entryRulePlayerOrColor
entryRulePlayerOrColor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlayerOrColorRule()); }
	iv_rulePlayerOrColor=rulePlayerOrColor
	{ $current=$iv_rulePlayerOrColor.current; }
	EOF;

// Rule PlayerOrColor
rulePlayerOrColor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPlayerOrColorRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPlayerOrColorAccess().getPlayerPlayerCrossReference_0_0());
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPlayerOrColorAccess().getColorColorEnumRuleCall_1_0());
				}
				lv_color_1_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlayerOrColorRule());
					}
					set(
						$current,
						"color",
						lv_color_1_0,
						"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSquare
entryRuleSquare returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSquareRule()); }
	iv_ruleSquare=ruleSquare
	{ $current=$iv_ruleSquare.current; }
	EOF;

// Rule Square
ruleSquare returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_square_0_0=RULE_SQUARETERMINAL
			{
				newLeafNode(lv_square_0_0, grammarAccess.getSquareAccess().getSquareSQUARETERMINALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSquareRule());
				}
				setWithLastConsumed(
					$current,
					"square",
					lv_square_0_0,
					"uk.ac.kcl.in.nerosiegfried.chessdsl.ChessDSL.SQUARETERMINAL");
			}
		)
	)
;

// Rule Remark
ruleRemark returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Good'
			{
				$current = grammarAccess.getRemarkAccess().getGoodEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRemarkAccess().getGoodEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Bad'
			{
				$current = grammarAccess.getRemarkAccess().getBadEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRemarkAccess().getBadEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Excellent'
			{
				$current = grammarAccess.getRemarkAccess().getExcellentEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRemarkAccess().getExcellentEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Risky'
			{
				$current = grammarAccess.getRemarkAccess().getRiskyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRemarkAccess().getRiskyEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Dubious'
			{
				$current = grammarAccess.getRemarkAccess().getDubiousEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRemarkAccess().getDubiousEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Check'
			{
				$current = grammarAccess.getRemarkAccess().getCheckEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getRemarkAccess().getCheckEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Checkmate'
			{
				$current = grammarAccess.getRemarkAccess().getCheckmateEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getRemarkAccess().getCheckmateEnumLiteralDeclaration_6());
			}
		)
	)
;

// Rule Color
ruleColor returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='White'
			{
				$current = grammarAccess.getColorAccess().getWhiteEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getColorAccess().getWhiteEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Black'
			{
				$current = grammarAccess.getColorAccess().getBlackEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getColorAccess().getBlackEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Piece
rulePiece returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='King'
			{
				$current = grammarAccess.getPieceAccess().getKingEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPieceAccess().getKingEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Queen'
			{
				$current = grammarAccess.getPieceAccess().getQueenEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPieceAccess().getQueenEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Rook'
			{
				$current = grammarAccess.getPieceAccess().getRookEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPieceAccess().getRookEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Bishop'
			{
				$current = grammarAccess.getPieceAccess().getBishopEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getPieceAccess().getBishopEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Knight'
			{
				$current = grammarAccess.getPieceAccess().getKnightEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getPieceAccess().getKnightEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Pawn'
			{
				$current = grammarAccess.getPieceAccess().getPawnEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getPieceAccess().getPawnEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_MOVENUMBER : ('0'..'9')+ '.';

RULE_SAN_TOKEN : RULE_ESCAPE ('K'|'Q'|'R'|'B'|'N')? (RULE_LETTER|RULE_RANKDIGIT)* 'x'? RULE_SQUARETERMINAL ('=' ('Q'|'R'|'B'|'N'))? ('+'|'#')* ('!'|'?')*;

fragment RULE_LETTER : ('a'..'h'|'A'..'H');

fragment RULE_RANKDIGIT : '1'..'8';

fragment RULE_ESCAPE : '@';

RULE_SQUARETERMINAL : RULE_LETTER RULE_RANKDIGIT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
