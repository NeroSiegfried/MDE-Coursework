/**
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.ChessDSLPackage;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANCapture;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANCheckMarker;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANDisambiguation;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANNormal;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANPiece;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANPromotion;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.SANRemark;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Square;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>SAN Normal</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.SANNormalImpl#getPiece <em>Piece</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.SANNormalImpl#getDisamb <em>Disamb</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.SANNormalImpl#getCapture <em>Capture</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.SANNormalImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.SANNormalImpl#getPromotion <em>Promotion</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.SANNormalImpl#getCheck <em>Check</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.SANNormalImpl#getRemark <em>Remark</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SANNormalImpl extends MinimalEObjectImpl.Container implements SANNormal
{
  /**
   * The cached value of the '{@link #getPiece() <em>Piece</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPiece()
   * @generated
   * @ordered
   */
  protected SANPiece piece;

  /**
   * The cached value of the '{@link #getDisamb() <em>Disamb</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisamb()
   * @generated
   * @ordered
   */
  protected SANDisambiguation disamb;

  /**
   * The cached value of the '{@link #getCapture() <em>Capture</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapture()
   * @generated
   * @ordered
   */
  protected SANCapture capture;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected Square target;

  /**
   * The cached value of the '{@link #getPromotion() <em>Promotion</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPromotion()
   * @generated
   * @ordered
   */
  protected SANPromotion promotion;

  /**
   * The cached value of the '{@link #getCheck() <em>Check</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCheck()
   * @generated
   * @ordered
   */
  protected SANCheckMarker check;

  /**
   * The cached value of the '{@link #getRemark() <em>Remark</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRemark()
   * @generated
   * @ordered
   */
  protected SANRemark remark;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SANNormalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ChessDSLPackage.Literals.SAN_NORMAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SANPiece getPiece()
  {
    return piece;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPiece(SANPiece newPiece, NotificationChain msgs)
  {
    SANPiece oldPiece = piece;
    piece = newPiece;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__PIECE, oldPiece, newPiece);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPiece(SANPiece newPiece)
  {
    if (newPiece != piece)
    {
      NotificationChain msgs = null;
      if (piece != null)
        msgs = ((InternalEObject)piece).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__PIECE, null, msgs);
      if (newPiece != null)
        msgs = ((InternalEObject)newPiece).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__PIECE, null, msgs);
      msgs = basicSetPiece(newPiece, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__PIECE, newPiece, newPiece));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SANDisambiguation getDisamb()
  {
    return disamb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDisamb(SANDisambiguation newDisamb, NotificationChain msgs)
  {
    SANDisambiguation oldDisamb = disamb;
    disamb = newDisamb;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__DISAMB, oldDisamb, newDisamb);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDisamb(SANDisambiguation newDisamb)
  {
    if (newDisamb != disamb)
    {
      NotificationChain msgs = null;
      if (disamb != null)
        msgs = ((InternalEObject)disamb).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__DISAMB, null, msgs);
      if (newDisamb != null)
        msgs = ((InternalEObject)newDisamb).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__DISAMB, null, msgs);
      msgs = basicSetDisamb(newDisamb, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__DISAMB, newDisamb, newDisamb));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SANCapture getCapture()
  {
    return capture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCapture(SANCapture newCapture, NotificationChain msgs)
  {
    SANCapture oldCapture = capture;
    capture = newCapture;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__CAPTURE, oldCapture, newCapture);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCapture(SANCapture newCapture)
  {
    if (newCapture != capture)
    {
      NotificationChain msgs = null;
      if (capture != null)
        msgs = ((InternalEObject)capture).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__CAPTURE, null, msgs);
      if (newCapture != null)
        msgs = ((InternalEObject)newCapture).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__CAPTURE, null, msgs);
      msgs = basicSetCapture(newCapture, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__CAPTURE, newCapture, newCapture));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Square getTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTarget(Square newTarget, NotificationChain msgs)
  {
    Square oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__TARGET, oldTarget, newTarget);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(Square newTarget)
  {
    if (newTarget != target)
    {
      NotificationChain msgs = null;
      if (target != null)
        msgs = ((InternalEObject)target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__TARGET, null, msgs);
      if (newTarget != null)
        msgs = ((InternalEObject)newTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__TARGET, null, msgs);
      msgs = basicSetTarget(newTarget, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__TARGET, newTarget, newTarget));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SANPromotion getPromotion()
  {
    return promotion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPromotion(SANPromotion newPromotion, NotificationChain msgs)
  {
    SANPromotion oldPromotion = promotion;
    promotion = newPromotion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__PROMOTION, oldPromotion, newPromotion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPromotion(SANPromotion newPromotion)
  {
    if (newPromotion != promotion)
    {
      NotificationChain msgs = null;
      if (promotion != null)
        msgs = ((InternalEObject)promotion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__PROMOTION, null, msgs);
      if (newPromotion != null)
        msgs = ((InternalEObject)newPromotion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__PROMOTION, null, msgs);
      msgs = basicSetPromotion(newPromotion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__PROMOTION, newPromotion, newPromotion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SANCheckMarker getCheck()
  {
    return check;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCheck(SANCheckMarker newCheck, NotificationChain msgs)
  {
    SANCheckMarker oldCheck = check;
    check = newCheck;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__CHECK, oldCheck, newCheck);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCheck(SANCheckMarker newCheck)
  {
    if (newCheck != check)
    {
      NotificationChain msgs = null;
      if (check != null)
        msgs = ((InternalEObject)check).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__CHECK, null, msgs);
      if (newCheck != null)
        msgs = ((InternalEObject)newCheck).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__CHECK, null, msgs);
      msgs = basicSetCheck(newCheck, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__CHECK, newCheck, newCheck));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SANRemark getRemark()
  {
    return remark;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRemark(SANRemark newRemark, NotificationChain msgs)
  {
    SANRemark oldRemark = remark;
    remark = newRemark;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__REMARK, oldRemark, newRemark);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRemark(SANRemark newRemark)
  {
    if (newRemark != remark)
    {
      NotificationChain msgs = null;
      if (remark != null)
        msgs = ((InternalEObject)remark).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__REMARK, null, msgs);
      if (newRemark != null)
        msgs = ((InternalEObject)newRemark).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.SAN_NORMAL__REMARK, null, msgs);
      msgs = basicSetRemark(newRemark, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.SAN_NORMAL__REMARK, newRemark, newRemark));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ChessDSLPackage.SAN_NORMAL__PIECE:
        return basicSetPiece(null, msgs);
      case ChessDSLPackage.SAN_NORMAL__DISAMB:
        return basicSetDisamb(null, msgs);
      case ChessDSLPackage.SAN_NORMAL__CAPTURE:
        return basicSetCapture(null, msgs);
      case ChessDSLPackage.SAN_NORMAL__TARGET:
        return basicSetTarget(null, msgs);
      case ChessDSLPackage.SAN_NORMAL__PROMOTION:
        return basicSetPromotion(null, msgs);
      case ChessDSLPackage.SAN_NORMAL__CHECK:
        return basicSetCheck(null, msgs);
      case ChessDSLPackage.SAN_NORMAL__REMARK:
        return basicSetRemark(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ChessDSLPackage.SAN_NORMAL__PIECE:
        return getPiece();
      case ChessDSLPackage.SAN_NORMAL__DISAMB:
        return getDisamb();
      case ChessDSLPackage.SAN_NORMAL__CAPTURE:
        return getCapture();
      case ChessDSLPackage.SAN_NORMAL__TARGET:
        return getTarget();
      case ChessDSLPackage.SAN_NORMAL__PROMOTION:
        return getPromotion();
      case ChessDSLPackage.SAN_NORMAL__CHECK:
        return getCheck();
      case ChessDSLPackage.SAN_NORMAL__REMARK:
        return getRemark();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ChessDSLPackage.SAN_NORMAL__PIECE:
        setPiece((SANPiece)newValue);
        return;
      case ChessDSLPackage.SAN_NORMAL__DISAMB:
        setDisamb((SANDisambiguation)newValue);
        return;
      case ChessDSLPackage.SAN_NORMAL__CAPTURE:
        setCapture((SANCapture)newValue);
        return;
      case ChessDSLPackage.SAN_NORMAL__TARGET:
        setTarget((Square)newValue);
        return;
      case ChessDSLPackage.SAN_NORMAL__PROMOTION:
        setPromotion((SANPromotion)newValue);
        return;
      case ChessDSLPackage.SAN_NORMAL__CHECK:
        setCheck((SANCheckMarker)newValue);
        return;
      case ChessDSLPackage.SAN_NORMAL__REMARK:
        setRemark((SANRemark)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.SAN_NORMAL__PIECE:
        setPiece((SANPiece)null);
        return;
      case ChessDSLPackage.SAN_NORMAL__DISAMB:
        setDisamb((SANDisambiguation)null);
        return;
      case ChessDSLPackage.SAN_NORMAL__CAPTURE:
        setCapture((SANCapture)null);
        return;
      case ChessDSLPackage.SAN_NORMAL__TARGET:
        setTarget((Square)null);
        return;
      case ChessDSLPackage.SAN_NORMAL__PROMOTION:
        setPromotion((SANPromotion)null);
        return;
      case ChessDSLPackage.SAN_NORMAL__CHECK:
        setCheck((SANCheckMarker)null);
        return;
      case ChessDSLPackage.SAN_NORMAL__REMARK:
        setRemark((SANRemark)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.SAN_NORMAL__PIECE:
        return piece != null;
      case ChessDSLPackage.SAN_NORMAL__DISAMB:
        return disamb != null;
      case ChessDSLPackage.SAN_NORMAL__CAPTURE:
        return capture != null;
      case ChessDSLPackage.SAN_NORMAL__TARGET:
        return target != null;
      case ChessDSLPackage.SAN_NORMAL__PROMOTION:
        return promotion != null;
      case ChessDSLPackage.SAN_NORMAL__CHECK:
        return check != null;
      case ChessDSLPackage.SAN_NORMAL__REMARK:
        return remark != null;
    }
    return super.eIsSet(featureID);
  }

} //SANNormalImpl
