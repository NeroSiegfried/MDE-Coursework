/**
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Capture;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.ChessDSLPackage;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.EnPassant;
import uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.Square;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>En Passant</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.EnPassantImpl#getCapture <em>Capture</em>}</li>
 *   <li>{@link uk.ac.kcl.in.nerosiegfried.chessdsl.chessDSL.impl.EnPassantImpl#getSquare <em>Square</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EnPassantImpl extends DSLMoveImpl implements EnPassant
{
  /**
   * The cached value of the '{@link #getCapture() <em>Capture</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapture()
   * @generated
   * @ordered
   */
  protected Capture capture;

  /**
   * The cached value of the '{@link #getSquare() <em>Square</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSquare()
   * @generated
   * @ordered
   */
  protected Square square;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnPassantImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ChessDSLPackage.Literals.EN_PASSANT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Capture getCapture()
  {
    return capture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCapture(Capture newCapture, NotificationChain msgs)
  {
    Capture oldCapture = capture;
    capture = newCapture;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.EN_PASSANT__CAPTURE, oldCapture, newCapture);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCapture(Capture newCapture)
  {
    if (newCapture != capture)
    {
      NotificationChain msgs = null;
      if (capture != null)
        msgs = ((InternalEObject)capture).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.EN_PASSANT__CAPTURE, null, msgs);
      if (newCapture != null)
        msgs = ((InternalEObject)newCapture).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.EN_PASSANT__CAPTURE, null, msgs);
      msgs = basicSetCapture(newCapture, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.EN_PASSANT__CAPTURE, newCapture, newCapture));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Square getSquare()
  {
    return square;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSquare(Square newSquare, NotificationChain msgs)
  {
    Square oldSquare = square;
    square = newSquare;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ChessDSLPackage.EN_PASSANT__SQUARE, oldSquare, newSquare);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSquare(Square newSquare)
  {
    if (newSquare != square)
    {
      NotificationChain msgs = null;
      if (square != null)
        msgs = ((InternalEObject)square).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.EN_PASSANT__SQUARE, null, msgs);
      if (newSquare != null)
        msgs = ((InternalEObject)newSquare).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ChessDSLPackage.EN_PASSANT__SQUARE, null, msgs);
      msgs = basicSetSquare(newSquare, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChessDSLPackage.EN_PASSANT__SQUARE, newSquare, newSquare));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ChessDSLPackage.EN_PASSANT__CAPTURE:
        return basicSetCapture(null, msgs);
      case ChessDSLPackage.EN_PASSANT__SQUARE:
        return basicSetSquare(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ChessDSLPackage.EN_PASSANT__CAPTURE:
        return getCapture();
      case ChessDSLPackage.EN_PASSANT__SQUARE:
        return getSquare();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ChessDSLPackage.EN_PASSANT__CAPTURE:
        setCapture((Capture)newValue);
        return;
      case ChessDSLPackage.EN_PASSANT__SQUARE:
        setSquare((Square)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.EN_PASSANT__CAPTURE:
        setCapture((Capture)null);
        return;
      case ChessDSLPackage.EN_PASSANT__SQUARE:
        setSquare((Square)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ChessDSLPackage.EN_PASSANT__CAPTURE:
        return capture != null;
      case ChessDSLPackage.EN_PASSANT__SQUARE:
        return square != null;
    }
    return super.eIsSet(featureID);
  }

} //EnPassantImpl
