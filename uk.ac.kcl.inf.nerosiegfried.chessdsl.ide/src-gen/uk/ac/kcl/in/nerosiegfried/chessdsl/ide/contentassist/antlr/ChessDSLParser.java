/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.in.nerosiegfried.chessdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.in.nerosiegfried.chessdsl.ide.contentassist.antlr.internal.InternalChessDSLParser;
import uk.ac.kcl.in.nerosiegfried.chessdsl.services.ChessDSLGrammarAccess;

public class ChessDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ChessDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ChessDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInitialStateAccess().getAlternatives_2(), "rule__InitialState__Alternatives_2");
			builder.put(grammarAccess.getPlacementAccess().getAlternatives_1(), "rule__Placement__Alternatives_1");
			builder.put(grammarAccess.getMovePairAccess().getAlternatives_1(), "rule__MovePair__Alternatives_1");
			builder.put(grammarAccess.getAnyMoveAccess().getAlternatives(), "rule__AnyMove__Alternatives");
			builder.put(grammarAccess.getDSLMoveAccess().getAlternatives(), "rule__DSLMove__Alternatives");
			builder.put(grammarAccess.getMoveAccess().getAlternatives_2(), "rule__Move__Alternatives_2");
			builder.put(grammarAccess.getCaptureAccess().getAlternatives_1(), "rule__Capture__Alternatives_1");
			builder.put(grammarAccess.getCastleAccess().getAlternatives(), "rule__Castle__Alternatives");
			builder.put(grammarAccess.getCastleAccess().getSideAlternatives_0_1_0(), "rule__Castle__SideAlternatives_0_1_0");
			builder.put(grammarAccess.getCastleAccess().getSideAlternatives_1_2_0(), "rule__Castle__SideAlternatives_1_2_0");
			builder.put(grammarAccess.getCastleAccess().getSideAlternatives_2_2_0(), "rule__Castle__SideAlternatives_2_2_0");
			builder.put(grammarAccess.getCastleAccess().getSideAlternatives_3_3_0(), "rule__Castle__SideAlternatives_3_3_0");
			builder.put(grammarAccess.getPromotionAccess().getMoveAlternatives_0_0(), "rule__Promotion__MoveAlternatives_0_0");
			builder.put(grammarAccess.getMethodAccess().getAlternatives(), "rule__Method__Alternatives");
			builder.put(grammarAccess.getWinAccess().getAlternatives(), "rule__Win__Alternatives");
			builder.put(grammarAccess.getDrawAccess().getResultAlternatives_3_0(), "rule__Draw__ResultAlternatives_3_0");
			builder.put(grammarAccess.getResultAccess().getAlternatives(), "rule__Result__Alternatives");
			builder.put(grammarAccess.getResultAccess().getAlternatives_0_0(), "rule__Result__Alternatives_0_0");
			builder.put(grammarAccess.getPlayerOrColorAccess().getAlternatives(), "rule__PlayerOrColor__Alternatives");
			builder.put(grammarAccess.getRemarkAccess().getAlternatives(), "rule__Remark__Alternatives");
			builder.put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
			builder.put(grammarAccess.getPieceAccess().getAlternatives(), "rule__Piece__Alternatives");
			builder.put(grammarAccess.getGameAccess().getGroup(), "rule__Game__Group__0");
			builder.put(grammarAccess.getGameAccess().getGroup_2(), "rule__Game__Group_2__0");
			builder.put(grammarAccess.getPlayerAccess().getGroup(), "rule__Player__Group__0");
			builder.put(grammarAccess.getInitialStateAccess().getGroup(), "rule__InitialState__Group__0");
			builder.put(grammarAccess.getInitialStateAccess().getGroup_2_1(), "rule__InitialState__Group_2_1__0");
			builder.put(grammarAccess.getCustomPositionsAccess().getGroup(), "rule__CustomPositions__Group__0");
			builder.put(grammarAccess.getPlacementAccess().getGroup(), "rule__Placement__Group__0");
			builder.put(grammarAccess.getCustomPieceAccess().getGroup(), "rule__CustomPiece__Group__0");
			builder.put(grammarAccess.getMovePairAccess().getGroup(), "rule__MovePair__Group__0");
			builder.put(grammarAccess.getMovePairAccess().getGroup_1_0(), "rule__MovePair__Group_1_0__0");
			builder.put(grammarAccess.getMovePairAccess().getGroup_2(), "rule__MovePair__Group_2__0");
			builder.put(grammarAccess.getAnyMoveAccess().getGroup_1(), "rule__AnyMove__Group_1__0");
			builder.put(grammarAccess.getAnyMoveAccess().getGroup_1_1(), "rule__AnyMove__Group_1_1__0");
			builder.put(grammarAccess.getDummyAccess().getGroup(), "rule__Dummy__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup_2_0(), "rule__Move__Group_2_0__0");
			builder.put(grammarAccess.getMoveAccess().getGroup_2_1(), "rule__Move__Group_2_1__0");
			builder.put(grammarAccess.getCaptureAccess().getGroup(), "rule__Capture__Group__0");
			builder.put(grammarAccess.getCaptureAccess().getGroup_1_0(), "rule__Capture__Group_1_0__0");
			builder.put(grammarAccess.getCaptureAccess().getGroup_1_1(), "rule__Capture__Group_1_1__0");
			builder.put(grammarAccess.getCastleAccess().getGroup_0(), "rule__Castle__Group_0__0");
			builder.put(grammarAccess.getCastleAccess().getGroup_1(), "rule__Castle__Group_1__0");
			builder.put(grammarAccess.getCastleAccess().getGroup_1_1(), "rule__Castle__Group_1_1__0");
			builder.put(grammarAccess.getCastleAccess().getGroup_2(), "rule__Castle__Group_2__0");
			builder.put(grammarAccess.getCastleAccess().getGroup_3(), "rule__Castle__Group_3__0");
			builder.put(grammarAccess.getEnPassantAccess().getGroup(), "rule__EnPassant__Group__0");
			builder.put(grammarAccess.getPromotionAccess().getGroup(), "rule__Promotion__Group__0");
			builder.put(grammarAccess.getEscaped_SANMoveAccess().getGroup(), "rule__Escaped_SANMove__Group__0");
			builder.put(grammarAccess.getConclusionAccess().getGroup(), "rule__Conclusion__Group__0");
			builder.put(grammarAccess.getTimeUpAccess().getGroup(), "rule__TimeUp__Group__0");
			builder.put(grammarAccess.getResignAccess().getGroup(), "rule__Resign__Group__0");
			builder.put(grammarAccess.getCheckmateAccess().getGroup(), "rule__Checkmate__Group__0");
			builder.put(grammarAccess.getDrawAccess().getGroup(), "rule__Draw__Group__0");
			builder.put(grammarAccess.getStalemateAccess().getGroup(), "rule__Stalemate__Group__0");
			builder.put(grammarAccess.getThreefoldAccess().getGroup(), "rule__Threefold__Group__0");
			builder.put(grammarAccess.getFiftyAccess().getGroup(), "rule__Fifty__Group__0");
			builder.put(grammarAccess.getAgreeAccess().getGroup(), "rule__Agree__Group__0");
			builder.put(grammarAccess.getResultAccess().getGroup_0(), "rule__Result__Group_0__0");
			builder.put(grammarAccess.getModelAccess().getGameAssignment(), "rule__Model__GameAssignment");
			builder.put(grammarAccess.getGameAccess().getTitleAssignment_1(), "rule__Game__TitleAssignment_1");
			builder.put(grammarAccess.getGameAccess().getPlayersAssignment_2_1(), "rule__Game__PlayersAssignment_2_1");
			builder.put(grammarAccess.getGameAccess().getInitialAssignment_3(), "rule__Game__InitialAssignment_3");
			builder.put(grammarAccess.getGameAccess().getMovesAssignment_5(), "rule__Game__MovesAssignment_5");
			builder.put(grammarAccess.getGameAccess().getConclusionAssignment_7(), "rule__Game__ConclusionAssignment_7");
			builder.put(grammarAccess.getPlayerAccess().getColorAssignment_0(), "rule__Player__ColorAssignment_0");
			builder.put(grammarAccess.getPlayerAccess().getNameAssignment_2(), "rule__Player__NameAssignment_2");
			builder.put(grammarAccess.getInitialStateAccess().getPositionsAssignment_2_1_1(), "rule__InitialState__PositionsAssignment_2_1_1");
			builder.put(grammarAccess.getCustomPositionsAccess().getPlacementAssignment_3(), "rule__CustomPositions__PlacementAssignment_3");
			builder.put(grammarAccess.getPlacementAccess().getPieceAssignment_0(), "rule__Placement__PieceAssignment_0");
			builder.put(grammarAccess.getPlacementAccess().getSquareAssignment_2(), "rule__Placement__SquareAssignment_2");
			builder.put(grammarAccess.getCustomPieceAccess().getColorAssignment_0(), "rule__CustomPiece__ColorAssignment_0");
			builder.put(grammarAccess.getCustomPieceAccess().getKindAssignment_1(), "rule__CustomPiece__KindAssignment_1");
			builder.put(grammarAccess.getMovePairAccess().getMoveNumberAssignment_0(), "rule__MovePair__MoveNumberAssignment_0");
			builder.put(grammarAccess.getMovePairAccess().getColor1Assignment_1_0_0(), "rule__MovePair__Color1Assignment_1_0_0");
			builder.put(grammarAccess.getMovePairAccess().getWhiteMoveAssignment_1_0_1(), "rule__MovePair__WhiteMoveAssignment_1_0_1");
			builder.put(grammarAccess.getMovePairAccess().getColor2Assignment_2_0(), "rule__MovePair__Color2Assignment_2_0");
			builder.put(grammarAccess.getMovePairAccess().getBlackMoveAssignment_2_1(), "rule__MovePair__BlackMoveAssignment_2_1");
			builder.put(grammarAccess.getAnyMoveAccess().getAlgebraicmoveAssignment_0(), "rule__AnyMove__AlgebraicmoveAssignment_0");
			builder.put(grammarAccess.getAnyMoveAccess().getMoveAssignment_1_0(), "rule__AnyMove__MoveAssignment_1_0");
			builder.put(grammarAccess.getAnyMoveAccess().getRemarksAssignment_1_1_1(), "rule__AnyMove__RemarksAssignment_1_1_1");
			builder.put(grammarAccess.getMoveAccess().getPieceAssignment_1(), "rule__Move__PieceAssignment_1");
			builder.put(grammarAccess.getMoveAccess().getFromAssignment_2_0_1(), "rule__Move__FromAssignment_2_0_1");
			builder.put(grammarAccess.getMoveAccess().getToAssignment_2_0_3(), "rule__Move__ToAssignment_2_0_3");
			builder.put(grammarAccess.getMoveAccess().getFromAssignment_2_1_1(), "rule__Move__FromAssignment_2_1_1");
			builder.put(grammarAccess.getMoveAccess().getToAssignment_2_1_3(), "rule__Move__ToAssignment_2_1_3");
			builder.put(grammarAccess.getCaptureAccess().getMoveAssignment_0(), "rule__Capture__MoveAssignment_0");
			builder.put(grammarAccess.getCaptureAccess().getCaptureAssignment_1_0_1(), "rule__Capture__CaptureAssignment_1_0_1");
			builder.put(grammarAccess.getCaptureAccess().getCaptureAssignment_1_1_2(), "rule__Capture__CaptureAssignment_1_1_2");
			builder.put(grammarAccess.getCastleAccess().getSideAssignment_0_1(), "rule__Castle__SideAssignment_0_1");
			builder.put(grammarAccess.getCastleAccess().getSideAssignment_1_2(), "rule__Castle__SideAssignment_1_2");
			builder.put(grammarAccess.getCastleAccess().getMoveAssignment_2_0(), "rule__Castle__MoveAssignment_2_0");
			builder.put(grammarAccess.getCastleAccess().getSideAssignment_2_2(), "rule__Castle__SideAssignment_2_2");
			builder.put(grammarAccess.getCastleAccess().getMoveAssignment_3_0(), "rule__Castle__MoveAssignment_3_0");
			builder.put(grammarAccess.getCastleAccess().getSideAssignment_3_3(), "rule__Castle__SideAssignment_3_3");
			builder.put(grammarAccess.getEnPassantAccess().getCaptureAssignment_0(), "rule__EnPassant__CaptureAssignment_0");
			builder.put(grammarAccess.getEnPassantAccess().getSquareAssignment_2(), "rule__EnPassant__SquareAssignment_2");
			builder.put(grammarAccess.getPromotionAccess().getMoveAssignment_0(), "rule__Promotion__MoveAssignment_0");
			builder.put(grammarAccess.getPromotionAccess().getPieceAssignment_2(), "rule__Promotion__PieceAssignment_2");
			builder.put(grammarAccess.getEscaped_SANMoveAccess().getTokenAssignment_1(), "rule__Escaped_SANMove__TokenAssignment_1");
			builder.put(grammarAccess.getConclusionAccess().getMethodAssignment_0(), "rule__Conclusion__MethodAssignment_0");
			builder.put(grammarAccess.getConclusionAccess().getResultAssignment_1(), "rule__Conclusion__ResultAssignment_1");
			builder.put(grammarAccess.getMethodAccess().getWinAssignment_0(), "rule__Method__WinAssignment_0");
			builder.put(grammarAccess.getMethodAccess().getDrawAssignment_1(), "rule__Method__DrawAssignment_1");
			builder.put(grammarAccess.getWinAccess().getTimeAssignment_0(), "rule__Win__TimeAssignment_0");
			builder.put(grammarAccess.getWinAccess().getResignAssignment_1(), "rule__Win__ResignAssignment_1");
			builder.put(grammarAccess.getWinAccess().getMateAssignment_2(), "rule__Win__MateAssignment_2");
			builder.put(grammarAccess.getTimeUpAccess().getPlayerAssignment_0(), "rule__TimeUp__PlayerAssignment_0");
			builder.put(grammarAccess.getResignAccess().getPlayerAssignment_0(), "rule__Resign__PlayerAssignment_0");
			builder.put(grammarAccess.getCheckmateAccess().getPlayer1Assignment_0(), "rule__Checkmate__Player1Assignment_0");
			builder.put(grammarAccess.getCheckmateAccess().getPlayer2Assignment_2(), "rule__Checkmate__Player2Assignment_2");
			builder.put(grammarAccess.getDrawAccess().getPlayer1Assignment_0(), "rule__Draw__Player1Assignment_0");
			builder.put(grammarAccess.getDrawAccess().getPlayer2Assignment_2(), "rule__Draw__Player2Assignment_2");
			builder.put(grammarAccess.getDrawAccess().getResultAssignment_3(), "rule__Draw__ResultAssignment_3");
			builder.put(grammarAccess.getResultAccess().getPlayerAssignment_0_0_0(), "rule__Result__PlayerAssignment_0_0_0");
			builder.put(grammarAccess.getResultAccess().getColorAssignment_0_0_1(), "rule__Result__ColorAssignment_0_0_1");
			builder.put(grammarAccess.getPlayerOrColorAccess().getPlayerAssignment_0(), "rule__PlayerOrColor__PlayerAssignment_0");
			builder.put(grammarAccess.getPlayerOrColorAccess().getColorAssignment_1(), "rule__PlayerOrColor__ColorAssignment_1");
			builder.put(grammarAccess.getSquareAccess().getSquareAssignment(), "rule__Square__SquareAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ChessDSLGrammarAccess grammarAccess;

	@Override
	protected InternalChessDSLParser createParser() {
		InternalChessDSLParser result = new InternalChessDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ChessDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ChessDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
