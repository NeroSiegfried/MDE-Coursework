/*
 * generated by Xtext 2.37.0
 */
grammar InternalChessDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.in.nerosiegfried.chessdsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.in.nerosiegfried.chessdsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.in.nerosiegfried.chessdsl.services.ChessDSLGrammarAccess;

}
@parser::members {
	private ChessDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(ChessDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGameAssignment()); }
		(rule__Model__GameAssignment)
		{ after(grammarAccess.getModelAccess().getGameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGame
entryRuleGame
:
{ before(grammarAccess.getGameRule()); }
	 ruleGame
{ after(grammarAccess.getGameRule()); } 
	 EOF 
;

// Rule Game
ruleGame 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGameAccess().getGroup()); }
		(rule__Game__Group__0)
		{ after(grammarAccess.getGameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlayer
entryRulePlayer
:
{ before(grammarAccess.getPlayerRule()); }
	 rulePlayer
{ after(grammarAccess.getPlayerRule()); } 
	 EOF 
;

// Rule Player
rulePlayer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlayerAccess().getGroup()); }
		(rule__Player__Group__0)
		{ after(grammarAccess.getPlayerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitialState
entryRuleInitialState
:
{ before(grammarAccess.getInitialStateRule()); }
	 ruleInitialState
{ after(grammarAccess.getInitialStateRule()); } 
	 EOF 
;

// Rule InitialState
ruleInitialState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitialStateAccess().getGroup()); }
		(rule__InitialState__Group__0)
		{ after(grammarAccess.getInitialStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCustomPositions
entryRuleCustomPositions
:
{ before(grammarAccess.getCustomPositionsRule()); }
	 ruleCustomPositions
{ after(grammarAccess.getCustomPositionsRule()); } 
	 EOF 
;

// Rule CustomPositions
ruleCustomPositions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCustomPositionsAccess().getGroup()); }
		(rule__CustomPositions__Group__0)
		{ after(grammarAccess.getCustomPositionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlacement
entryRulePlacement
:
{ before(grammarAccess.getPlacementRule()); }
	 rulePlacement
{ after(grammarAccess.getPlacementRule()); } 
	 EOF 
;

// Rule Placement
rulePlacement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlacementAccess().getGroup()); }
		(rule__Placement__Group__0)
		{ after(grammarAccess.getPlacementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCustomPiece
entryRuleCustomPiece
:
{ before(grammarAccess.getCustomPieceRule()); }
	 ruleCustomPiece
{ after(grammarAccess.getCustomPieceRule()); } 
	 EOF 
;

// Rule CustomPiece
ruleCustomPiece 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCustomPieceAccess().getGroup()); }
		(rule__CustomPiece__Group__0)
		{ after(grammarAccess.getCustomPieceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMovePair
entryRuleMovePair
:
{ before(grammarAccess.getMovePairRule()); }
	 ruleMovePair
{ after(grammarAccess.getMovePairRule()); } 
	 EOF 
;

// Rule MovePair
ruleMovePair 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMovePairAccess().getGroup()); }
		(rule__MovePair__Group__0)
		{ after(grammarAccess.getMovePairAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMOVENUMBER
entryRuleMOVENUMBER
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getMOVENUMBERRule()); }
	 ruleMOVENUMBER
{ after(grammarAccess.getMOVENUMBERRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule MOVENUMBER
ruleMOVENUMBER 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMOVENUMBERAccess().getGroup()); }
		(rule__MOVENUMBER__Group__0)
		{ after(grammarAccess.getMOVENUMBERAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAnyMove
entryRuleAnyMove
:
{ before(grammarAccess.getAnyMoveRule()); }
	 ruleAnyMove
{ after(grammarAccess.getAnyMoveRule()); } 
	 EOF 
;

// Rule AnyMove
ruleAnyMove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnyMoveAccess().getGroup()); }
		(rule__AnyMove__Group__0)
		{ after(grammarAccess.getAnyMoveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDSLMove
entryRuleDSLMove
:
{ before(grammarAccess.getDSLMoveRule()); }
	 ruleDSLMove
{ after(grammarAccess.getDSLMoveRule()); } 
	 EOF 
;

// Rule DSLMove
ruleDSLMove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDSLMoveAccess().getAlternatives()); }
		(rule__DSLMove__Alternatives)
		{ after(grammarAccess.getDSLMoveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDummy
entryRuleDummy
:
{ before(grammarAccess.getDummyRule()); }
	 ruleDummy
{ after(grammarAccess.getDummyRule()); } 
	 EOF 
;

// Rule Dummy
ruleDummy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDummyAccess().getGroup()); }
		(rule__Dummy__Group__0)
		{ after(grammarAccess.getDummyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMove
entryRuleMove
:
{ before(grammarAccess.getMoveRule()); }
	 ruleMove
{ after(grammarAccess.getMoveRule()); } 
	 EOF 
;

// Rule Move
ruleMove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveAccess().getGroup()); }
		(rule__Move__Group__0)
		{ after(grammarAccess.getMoveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCapture
entryRuleCapture
:
{ before(grammarAccess.getCaptureRule()); }
	 ruleCapture
{ after(grammarAccess.getCaptureRule()); } 
	 EOF 
;

// Rule Capture
ruleCapture 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaptureAccess().getGroup()); }
		(rule__Capture__Group__0)
		{ after(grammarAccess.getCaptureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCastle
entryRuleCastle
:
{ before(grammarAccess.getCastleRule()); }
	 ruleCastle
{ after(grammarAccess.getCastleRule()); } 
	 EOF 
;

// Rule Castle
ruleCastle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCastleAccess().getAlternatives()); }
		(rule__Castle__Alternatives)
		{ after(grammarAccess.getCastleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnPassant
entryRuleEnPassant
:
{ before(grammarAccess.getEnPassantRule()); }
	 ruleEnPassant
{ after(grammarAccess.getEnPassantRule()); } 
	 EOF 
;

// Rule EnPassant
ruleEnPassant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnPassantAccess().getGroup()); }
		(rule__EnPassant__Group__0)
		{ after(grammarAccess.getEnPassantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePromotion
entryRulePromotion
:
{ before(grammarAccess.getPromotionRule()); }
	 rulePromotion
{ after(grammarAccess.getPromotionRule()); } 
	 EOF 
;

// Rule Promotion
rulePromotion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPromotionAccess().getGroup()); }
		(rule__Promotion__Group__0)
		{ after(grammarAccess.getPromotionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConclusion
entryRuleConclusion
:
{ before(grammarAccess.getConclusionRule()); }
	 ruleConclusion
{ after(grammarAccess.getConclusionRule()); } 
	 EOF 
;

// Rule Conclusion
ruleConclusion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConclusionAccess().getGroup()); }
		(rule__Conclusion__Group__0)
		{ after(grammarAccess.getConclusionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethod
entryRuleMethod
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodAccess().getAlternatives()); }
		(rule__Method__Alternatives)
		{ after(grammarAccess.getMethodAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWin
entryRuleWin
:
{ before(grammarAccess.getWinRule()); }
	 ruleWin
{ after(grammarAccess.getWinRule()); } 
	 EOF 
;

// Rule Win
ruleWin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWinAccess().getAlternatives()); }
		(rule__Win__Alternatives)
		{ after(grammarAccess.getWinAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeUp
entryRuleTimeUp
:
{ before(grammarAccess.getTimeUpRule()); }
	 ruleTimeUp
{ after(grammarAccess.getTimeUpRule()); } 
	 EOF 
;

// Rule TimeUp
ruleTimeUp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeUpAccess().getGroup()); }
		(rule__TimeUp__Group__0)
		{ after(grammarAccess.getTimeUpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResign
entryRuleResign
:
{ before(grammarAccess.getResignRule()); }
	 ruleResign
{ after(grammarAccess.getResignRule()); } 
	 EOF 
;

// Rule Resign
ruleResign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResignAccess().getGroup()); }
		(rule__Resign__Group__0)
		{ after(grammarAccess.getResignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCheckmate
entryRuleCheckmate
:
{ before(grammarAccess.getCheckmateRule()); }
	 ruleCheckmate
{ after(grammarAccess.getCheckmateRule()); } 
	 EOF 
;

// Rule Checkmate
ruleCheckmate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCheckmateAccess().getGroup()); }
		(rule__Checkmate__Group__0)
		{ after(grammarAccess.getCheckmateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDraw
entryRuleDraw
:
{ before(grammarAccess.getDrawRule()); }
	 ruleDraw
{ after(grammarAccess.getDrawRule()); } 
	 EOF 
;

// Rule Draw
ruleDraw 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDrawAccess().getGroup()); }
		(rule__Draw__Group__0)
		{ after(grammarAccess.getDrawAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStalemate
entryRuleStalemate
:
{ before(grammarAccess.getStalemateRule()); }
	 ruleStalemate
{ after(grammarAccess.getStalemateRule()); } 
	 EOF 
;

// Rule Stalemate
ruleStalemate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStalemateAccess().getGroup()); }
		(rule__Stalemate__Group__0)
		{ after(grammarAccess.getStalemateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleThreefold
entryRuleThreefold
:
{ before(grammarAccess.getThreefoldRule()); }
	 ruleThreefold
{ after(grammarAccess.getThreefoldRule()); } 
	 EOF 
;

// Rule Threefold
ruleThreefold 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getThreefoldAccess().getGroup()); }
		(rule__Threefold__Group__0)
		{ after(grammarAccess.getThreefoldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFifty
entryRuleFifty
:
{ before(grammarAccess.getFiftyRule()); }
	 ruleFifty
{ after(grammarAccess.getFiftyRule()); } 
	 EOF 
;

// Rule Fifty
ruleFifty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFiftyAccess().getGroup()); }
		(rule__Fifty__Group__0)
		{ after(grammarAccess.getFiftyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAgree
entryRuleAgree
:
{ before(grammarAccess.getAgreeRule()); }
	 ruleAgree
{ after(grammarAccess.getAgreeRule()); } 
	 EOF 
;

// Rule Agree
ruleAgree 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAgreeAccess().getGroup()); }
		(rule__Agree__Group__0)
		{ after(grammarAccess.getAgreeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResult
entryRuleResult
:
{ before(grammarAccess.getResultRule()); }
	 ruleResult
{ after(grammarAccess.getResultRule()); } 
	 EOF 
;

// Rule Result
ruleResult 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResultAccess().getAlternatives()); }
		(rule__Result__Alternatives)
		{ after(grammarAccess.getResultAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlayerOrColor
entryRulePlayerOrColor
:
{ before(grammarAccess.getPlayerOrColorRule()); }
	 rulePlayerOrColor
{ after(grammarAccess.getPlayerOrColorRule()); } 
	 EOF 
;

// Rule PlayerOrColor
rulePlayerOrColor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlayerOrColorAccess().getAlternatives()); }
		(rule__PlayerOrColor__Alternatives)
		{ after(grammarAccess.getPlayerOrColorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSquare
entryRuleSquare
:
{ before(grammarAccess.getSquareRule()); }
	 ruleSquare
{ after(grammarAccess.getSquareRule()); } 
	 EOF 
;

// Rule Square
ruleSquare 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSquareAccess().getSquareAssignment()); }
		(rule__Square__SquareAssignment)
		{ after(grammarAccess.getSquareAccess().getSquareAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Remark
ruleRemark
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemarkAccess().getAlternatives()); }
		(rule__Remark__Alternatives)
		{ after(grammarAccess.getRemarkAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Color
ruleColor
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorAccess().getAlternatives()); }
		(rule__Color__Alternatives)
		{ after(grammarAccess.getColorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Piece
rulePiece
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPieceAccess().getAlternatives()); }
		(rule__Piece__Alternatives)
		{ after(grammarAccess.getPieceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialState__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitialStateAccess().getFreshKeyword_2_0()); }
		'fresh'
		{ after(grammarAccess.getInitialStateAccess().getFreshKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getInitialStateAccess().getGroup_2_1()); }
		(rule__InitialState__Group_2_1__0)
		{ after(grammarAccess.getInitialStateAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Placement__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlacementAccess().getEqualsSignKeyword_1_0()); }
		'='
		{ after(grammarAccess.getPlacementAccess().getEqualsSignKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlacementAccess().getOnKeyword_1_1()); }
		'on'
		{ after(grammarAccess.getPlacementAccess().getOnKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovePairAccess().getGroup_1_0()); }
		(rule__MovePair__Group_1_0__0)
		{ after(grammarAccess.getMovePairAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMovePairAccess().getFullStopFullStopFullStopKeyword_1_1()); }
		'...'
		{ after(grammarAccess.getMovePairAccess().getFullStopFullStopFullStopKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSLMove__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDSLMoveAccess().getMoveParserRuleCall_0()); }
		ruleMove
		{ after(grammarAccess.getDSLMoveAccess().getMoveParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDSLMoveAccess().getCaptureParserRuleCall_1()); }
		ruleCapture
		{ after(grammarAccess.getDSLMoveAccess().getCaptureParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDSLMoveAccess().getCastleParserRuleCall_2()); }
		ruleCastle
		{ after(grammarAccess.getDSLMoveAccess().getCastleParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getDSLMoveAccess().getEnPassantParserRuleCall_3()); }
		ruleEnPassant
		{ after(grammarAccess.getDSLMoveAccess().getEnPassantParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getDSLMoveAccess().getPromotionParserRuleCall_4()); }
		rulePromotion
		{ after(grammarAccess.getDSLMoveAccess().getPromotionParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getDSLMoveAccess().getDummyParserRuleCall_5()); }
		ruleDummy
		{ after(grammarAccess.getDSLMoveAccess().getDummyParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getGroup_2_0()); }
		(rule__Move__Group_2_0__0)
		{ after(grammarAccess.getMoveAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getMoveAccess().getGroup_2_1()); }
		(rule__Move__Group_2_1__0)
		{ after(grammarAccess.getMoveAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaptureAccess().getGroup_1_0()); }
		(rule__Capture__Group_1_0__0)
		{ after(grammarAccess.getCaptureAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getCaptureAccess().getGroup_1_1()); }
		(rule__Capture__Group_1_1__0)
		{ after(grammarAccess.getCaptureAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getGroup_0()); }
		(rule__Castle__Group_0__0)
		{ after(grammarAccess.getCastleAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCastleAccess().getGroup_1()); }
		(rule__Castle__Group_1__0)
		{ after(grammarAccess.getCastleAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getCastleAccess().getGroup_2()); }
		(rule__Castle__Group_2__0)
		{ after(grammarAccess.getCastleAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getCastleAccess().getGroup_3()); }
		(rule__Castle__Group_3__0)
		{ after(grammarAccess.getCastleAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__SideAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getSideKingsideKeyword_0_1_0_0()); }
		'Kingside'
		{ after(grammarAccess.getCastleAccess().getSideKingsideKeyword_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCastleAccess().getSideQueensideKeyword_0_1_0_1()); }
		'Queenside'
		{ after(grammarAccess.getCastleAccess().getSideQueensideKeyword_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__SideAlternatives_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getSideKingsideKeyword_1_2_0_0()); }
		'Kingside'
		{ after(grammarAccess.getCastleAccess().getSideKingsideKeyword_1_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCastleAccess().getSideQueensideKeyword_1_2_0_1()); }
		'Queenside'
		{ after(grammarAccess.getCastleAccess().getSideQueensideKeyword_1_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__SideAlternatives_2_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getSideKingsideKeyword_2_2_0_0()); }
		'Kingside'
		{ after(grammarAccess.getCastleAccess().getSideKingsideKeyword_2_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCastleAccess().getSideQueensideKeyword_2_2_0_1()); }
		'Queenside'
		{ after(grammarAccess.getCastleAccess().getSideQueensideKeyword_2_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__SideAlternatives_3_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getSideKingsideKeyword_3_3_0_0()); }
		'Kingside'
		{ after(grammarAccess.getCastleAccess().getSideKingsideKeyword_3_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCastleAccess().getSideQueensideKeyword_3_3_0_1()); }
		'Queenside'
		{ after(grammarAccess.getCastleAccess().getSideQueensideKeyword_3_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Promotion__MoveAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPromotionAccess().getMoveMoveParserRuleCall_0_0_0()); }
		ruleMove
		{ after(grammarAccess.getPromotionAccess().getMoveMoveParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPromotionAccess().getMoveCaptureParserRuleCall_0_0_1()); }
		ruleCapture
		{ after(grammarAccess.getPromotionAccess().getMoveCaptureParserRuleCall_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getWinAssignment_0()); }
		(rule__Method__WinAssignment_0)
		{ after(grammarAccess.getMethodAccess().getWinAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodAccess().getDrawAssignment_1()); }
		(rule__Method__DrawAssignment_1)
		{ after(grammarAccess.getMethodAccess().getDrawAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Win__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWinAccess().getTimeAssignment_0()); }
		(rule__Win__TimeAssignment_0)
		{ after(grammarAccess.getWinAccess().getTimeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getWinAccess().getResignAssignment_1()); }
		(rule__Win__ResignAssignment_1)
		{ after(grammarAccess.getWinAccess().getResignAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getWinAccess().getMateAssignment_2()); }
		(rule__Win__MateAssignment_2)
		{ after(grammarAccess.getWinAccess().getMateAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__ResultAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDrawAccess().getResultStalemateParserRuleCall_3_0_0()); }
		ruleStalemate
		{ after(grammarAccess.getDrawAccess().getResultStalemateParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDrawAccess().getResultThreefoldParserRuleCall_3_0_1()); }
		ruleThreefold
		{ after(grammarAccess.getDrawAccess().getResultThreefoldParserRuleCall_3_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getDrawAccess().getResultFiftyParserRuleCall_3_0_2()); }
		ruleFifty
		{ after(grammarAccess.getDrawAccess().getResultFiftyParserRuleCall_3_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getDrawAccess().getResultAgreeParserRuleCall_3_0_3()); }
		ruleAgree
		{ after(grammarAccess.getDrawAccess().getResultAgreeParserRuleCall_3_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResultAccess().getGroup_0()); }
		(rule__Result__Group_0__0)
		{ after(grammarAccess.getResultAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getResultAccess().getDrawKeyword_1()); }
		'draw'
		{ after(grammarAccess.getResultAccess().getDrawKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Alternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResultAccess().getPlayerAssignment_0_0_0()); }
		(rule__Result__PlayerAssignment_0_0_0)
		{ after(grammarAccess.getResultAccess().getPlayerAssignment_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getResultAccess().getColorAssignment_0_0_1()); }
		(rule__Result__ColorAssignment_0_0_1)
		{ after(grammarAccess.getResultAccess().getColorAssignment_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlayerOrColor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlayerOrColorAccess().getPlayerAssignment_0()); }
		(rule__PlayerOrColor__PlayerAssignment_0)
		{ after(grammarAccess.getPlayerOrColorAccess().getPlayerAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlayerOrColorAccess().getColorAssignment_1()); }
		(rule__PlayerOrColor__ColorAssignment_1)
		{ after(grammarAccess.getPlayerOrColorAccess().getColorAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Remark__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRemarkAccess().getGoodEnumLiteralDeclaration_0()); }
		('Good')
		{ after(grammarAccess.getRemarkAccess().getGoodEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRemarkAccess().getBadEnumLiteralDeclaration_1()); }
		('Bad')
		{ after(grammarAccess.getRemarkAccess().getBadEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRemarkAccess().getExcellentEnumLiteralDeclaration_2()); }
		('Excellent')
		{ after(grammarAccess.getRemarkAccess().getExcellentEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getRemarkAccess().getRiskyEnumLiteralDeclaration_3()); }
		('Risky')
		{ after(grammarAccess.getRemarkAccess().getRiskyEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getRemarkAccess().getDubiousEnumLiteralDeclaration_4()); }
		('Dubious')
		{ after(grammarAccess.getRemarkAccess().getDubiousEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getRemarkAccess().getCheckEnumLiteralDeclaration_5()); }
		('Check')
		{ after(grammarAccess.getRemarkAccess().getCheckEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getRemarkAccess().getCheckmateEnumLiteralDeclaration_6()); }
		('Checkmate')
		{ after(grammarAccess.getRemarkAccess().getCheckmateEnumLiteralDeclaration_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorAccess().getWhiteEnumLiteralDeclaration_0()); }
		('White')
		{ after(grammarAccess.getColorAccess().getWhiteEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getColorAccess().getBlackEnumLiteralDeclaration_1()); }
		('Black')
		{ after(grammarAccess.getColorAccess().getBlackEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Piece__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPieceAccess().getKingEnumLiteralDeclaration_0()); }
		('King')
		{ after(grammarAccess.getPieceAccess().getKingEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPieceAccess().getQueenEnumLiteralDeclaration_1()); }
		('Queen')
		{ after(grammarAccess.getPieceAccess().getQueenEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPieceAccess().getRookEnumLiteralDeclaration_2()); }
		('Rook')
		{ after(grammarAccess.getPieceAccess().getRookEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getPieceAccess().getBishopEnumLiteralDeclaration_3()); }
		('Bishop')
		{ after(grammarAccess.getPieceAccess().getBishopEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getPieceAccess().getKnightEnumLiteralDeclaration_4()); }
		('Knight')
		{ after(grammarAccess.getPieceAccess().getKnightEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getPieceAccess().getPawnEnumLiteralDeclaration_5()); }
		('Pawn')
		{ after(grammarAccess.getPieceAccess().getPawnEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__0__Impl
	rule__Game__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getGameKeyword_0()); }
	'Game'
	{ after(grammarAccess.getGameAccess().getGameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__1__Impl
	rule__Game__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getTitleAssignment_1()); }
	(rule__Game__TitleAssignment_1)
	{ after(grammarAccess.getGameAccess().getTitleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__2__Impl
	rule__Game__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getGroup_2()); }
	(rule__Game__Group_2__0)?
	{ after(grammarAccess.getGameAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__3__Impl
	rule__Game__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getInitialAssignment_3()); }
	(rule__Game__InitialAssignment_3)?
	{ after(grammarAccess.getGameAccess().getInitialAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__4__Impl
	rule__Game__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getMovesKeyword_4()); }
	'Moves:'
	{ after(grammarAccess.getGameAccess().getMovesKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__5__Impl
	rule__Game__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getMovesAssignment_5()); }
	(rule__Game__MovesAssignment_5)*
	{ after(grammarAccess.getGameAccess().getMovesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__6__Impl
	rule__Game__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getGameAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getConclusionAssignment_7()); }
	(rule__Game__ConclusionAssignment_7)?
	{ after(grammarAccess.getGameAccess().getConclusionAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Game__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group_2__0__Impl
	rule__Game__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getPlayersKeyword_2_0()); }
	'Players:'
	{ after(grammarAccess.getGameAccess().getPlayersKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getGameAccess().getPlayersAssignment_2_1()); }
		(rule__Game__PlayersAssignment_2_1)
		{ after(grammarAccess.getGameAccess().getPlayersAssignment_2_1()); }
	)
	(
		{ before(grammarAccess.getGameAccess().getPlayersAssignment_2_1()); }
		(rule__Game__PlayersAssignment_2_1)*
		{ after(grammarAccess.getGameAccess().getPlayersAssignment_2_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Player__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Player__Group__0__Impl
	rule__Player__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Player__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlayerAccess().getColorAssignment_0()); }
	(rule__Player__ColorAssignment_0)
	{ after(grammarAccess.getPlayerAccess().getColorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Player__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Player__Group__1__Impl
	rule__Player__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Player__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlayerAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getPlayerAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Player__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Player__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Player__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlayerAccess().getNameAssignment_2()); }
	(rule__Player__NameAssignment_2)
	{ after(grammarAccess.getPlayerAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InitialState__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialState__Group__0__Impl
	rule__InitialState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialState__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialStateAccess().getInitialStateAction_0()); }
	()
	{ after(grammarAccess.getInitialStateAccess().getInitialStateAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialState__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialState__Group__1__Impl
	rule__InitialState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialState__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialStateAccess().getInitialStateKeyword_1()); }
	'InitialState'
	{ after(grammarAccess.getInitialStateAccess().getInitialStateKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialState__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialState__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialState__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialStateAccess().getAlternatives_2()); }
	(rule__InitialState__Alternatives_2)?
	{ after(grammarAccess.getInitialStateAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InitialState__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialState__Group_2_1__0__Impl
	rule__InitialState__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialState__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialStateAccess().getCustomKeyword_2_1_0()); }
	'custom'
	{ after(grammarAccess.getInitialStateAccess().getCustomKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialState__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialState__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialState__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialStateAccess().getPositionsAssignment_2_1_1()); }
	(rule__InitialState__PositionsAssignment_2_1_1)
	{ after(grammarAccess.getInitialStateAccess().getPositionsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CustomPositions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CustomPositions__Group__0__Impl
	rule__CustomPositions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPositions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomPositionsAccess().getCustomPositionsAction_0()); }
	()
	{ after(grammarAccess.getCustomPositionsAccess().getCustomPositionsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPositions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CustomPositions__Group__1__Impl
	rule__CustomPositions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPositions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomPositionsAccess().getPositionsKeyword_1()); }
	'Positions:'
	{ after(grammarAccess.getCustomPositionsAccess().getPositionsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPositions__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CustomPositions__Group__2__Impl
	rule__CustomPositions__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPositions__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomPositionsAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getCustomPositionsAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPositions__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CustomPositions__Group__3__Impl
	rule__CustomPositions__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPositions__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomPositionsAccess().getPlacementAssignment_3()); }
	(rule__CustomPositions__PlacementAssignment_3)*
	{ after(grammarAccess.getCustomPositionsAccess().getPlacementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPositions__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CustomPositions__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPositions__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomPositionsAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getCustomPositionsAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Placement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Placement__Group__0__Impl
	rule__Placement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Placement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlacementAccess().getPieceAssignment_0()); }
	(rule__Placement__PieceAssignment_0)
	{ after(grammarAccess.getPlacementAccess().getPieceAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Placement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Placement__Group__1__Impl
	rule__Placement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Placement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlacementAccess().getAlternatives_1()); }
	(rule__Placement__Alternatives_1)
	{ after(grammarAccess.getPlacementAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Placement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Placement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Placement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlacementAccess().getSquareAssignment_2()); }
	(rule__Placement__SquareAssignment_2)
	{ after(grammarAccess.getPlacementAccess().getSquareAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CustomPiece__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CustomPiece__Group__0__Impl
	rule__CustomPiece__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPiece__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomPieceAccess().getColorAssignment_0()); }
	(rule__CustomPiece__ColorAssignment_0)
	{ after(grammarAccess.getCustomPieceAccess().getColorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPiece__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CustomPiece__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPiece__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomPieceAccess().getKindAssignment_1()); }
	(rule__CustomPiece__KindAssignment_1)
	{ after(grammarAccess.getCustomPieceAccess().getKindAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MovePair__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MovePair__Group__0__Impl
	rule__MovePair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMovePairAccess().getMoveNumberAssignment_0()); }
	(rule__MovePair__MoveNumberAssignment_0)
	{ after(grammarAccess.getMovePairAccess().getMoveNumberAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MovePair__Group__1__Impl
	rule__MovePair__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMovePairAccess().getAlternatives_1()); }
	(rule__MovePair__Alternatives_1)
	{ after(grammarAccess.getMovePairAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MovePair__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMovePairAccess().getGroup_2()); }
	(rule__MovePair__Group_2__0)?
	{ after(grammarAccess.getMovePairAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MovePair__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MovePair__Group_1_0__0__Impl
	rule__MovePair__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMovePairAccess().getColor1Assignment_1_0_0()); }
	(rule__MovePair__Color1Assignment_1_0_0)?
	{ after(grammarAccess.getMovePairAccess().getColor1Assignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MovePair__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMovePairAccess().getWhiteMoveAssignment_1_0_1()); }
	(rule__MovePair__WhiteMoveAssignment_1_0_1)
	{ after(grammarAccess.getMovePairAccess().getWhiteMoveAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MovePair__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MovePair__Group_2__0__Impl
	rule__MovePair__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMovePairAccess().getColor2Assignment_2_0()); }
	(rule__MovePair__Color2Assignment_2_0)?
	{ after(grammarAccess.getMovePairAccess().getColor2Assignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MovePair__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMovePairAccess().getBlackMoveAssignment_2_1()); }
	(rule__MovePair__BlackMoveAssignment_2_1)
	{ after(grammarAccess.getMovePairAccess().getBlackMoveAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MOVENUMBER__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MOVENUMBER__Group__0__Impl
	rule__MOVENUMBER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVENUMBER__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMOVENUMBERAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getMOVENUMBERAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVENUMBER__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MOVENUMBER__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVENUMBER__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMOVENUMBERAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getMOVENUMBERAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnyMove__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnyMove__Group__0__Impl
	rule__AnyMove__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyMove__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnyMoveAccess().getMoveAssignment_0()); }
	(rule__AnyMove__MoveAssignment_0)
	{ after(grammarAccess.getAnyMoveAccess().getMoveAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyMove__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnyMove__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyMove__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnyMoveAccess().getGroup_1()); }
	(rule__AnyMove__Group_1__0)?
	{ after(grammarAccess.getAnyMoveAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnyMove__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnyMove__Group_1__0__Impl
	rule__AnyMove__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyMove__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnyMoveAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getAnyMoveAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyMove__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnyMove__Group_1__1__Impl
	rule__AnyMove__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyMove__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnyMoveAccess().getRemarksAssignment_1_1()); }
	(rule__AnyMove__RemarksAssignment_1_1)*
	{ after(grammarAccess.getAnyMoveAccess().getRemarksAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyMove__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnyMove__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyMove__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnyMoveAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getAnyMoveAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dummy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dummy__Group__0__Impl
	rule__Dummy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dummy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDummyAccess().getDummyAction_0()); }
	()
	{ after(grammarAccess.getDummyAccess().getDummyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dummy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dummy__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dummy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDummyAccess().getDummyKeyword_1()); }
	'dummy'
	{ after(grammarAccess.getDummyAccess().getDummyKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Move__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__0__Impl
	rule__Move__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getMovesKeyword_0()); }
	('moves')?
	{ after(grammarAccess.getMoveAccess().getMovesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__1__Impl
	rule__Move__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getPieceAssignment_1()); }
	(rule__Move__PieceAssignment_1)
	{ after(grammarAccess.getMoveAccess().getPieceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getAlternatives_2()); }
	(rule__Move__Alternatives_2)
	{ after(grammarAccess.getMoveAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Move__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_2_0__0__Impl
	rule__Move__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getLeftParenthesisKeyword_2_0_0()); }
	'('
	{ after(grammarAccess.getMoveAccess().getLeftParenthesisKeyword_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_2_0__1__Impl
	rule__Move__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getFromAssignment_2_0_1()); }
	(rule__Move__FromAssignment_2_0_1)
	{ after(grammarAccess.getMoveAccess().getFromAssignment_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_2_0__2__Impl
	rule__Move__Group_2_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getHyphenMinusGreaterThanSignKeyword_2_0_2()); }
	'->'
	{ after(grammarAccess.getMoveAccess().getHyphenMinusGreaterThanSignKeyword_2_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_2_0__3__Impl
	rule__Move__Group_2_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getToAssignment_2_0_3()); }
	(rule__Move__ToAssignment_2_0_3)
	{ after(grammarAccess.getMoveAccess().getToAssignment_2_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_2_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getRightParenthesisKeyword_2_0_4()); }
	')'
	{ after(grammarAccess.getMoveAccess().getRightParenthesisKeyword_2_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Move__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_2_1__0__Impl
	rule__Move__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getFromKeyword_2_1_0()); }
	'from'
	{ after(grammarAccess.getMoveAccess().getFromKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_2_1__1__Impl
	rule__Move__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getFromAssignment_2_1_1()); }
	(rule__Move__FromAssignment_2_1_1)
	{ after(grammarAccess.getMoveAccess().getFromAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_2_1__2__Impl
	rule__Move__Group_2_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getToKeyword_2_1_2()); }
	'to'
	{ after(grammarAccess.getMoveAccess().getToKeyword_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_2_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_2_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getToAssignment_2_1_3()); }
	(rule__Move__ToAssignment_2_1_3)
	{ after(grammarAccess.getMoveAccess().getToAssignment_2_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Capture__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capture__Group__0__Impl
	rule__Capture__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaptureAccess().getMoveAssignment_0()); }
	(rule__Capture__MoveAssignment_0)
	{ after(grammarAccess.getCaptureAccess().getMoveAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capture__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaptureAccess().getAlternatives_1()); }
	(rule__Capture__Alternatives_1)
	{ after(grammarAccess.getCaptureAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Capture__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capture__Group_1_0__0__Impl
	rule__Capture__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaptureAccess().getCaptureKeyword_1_0_0()); }
	'Capture('
	{ after(grammarAccess.getCaptureAccess().getCaptureKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capture__Group_1_0__1__Impl
	rule__Capture__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaptureAccess().getCaptureAssignment_1_0_1()); }
	(rule__Capture__CaptureAssignment_1_0_1)
	{ after(grammarAccess.getCaptureAccess().getCaptureAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capture__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaptureAccess().getRightParenthesisKeyword_1_0_2()); }
	')'
	{ after(grammarAccess.getCaptureAccess().getRightParenthesisKeyword_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Capture__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capture__Group_1_1__0__Impl
	rule__Capture__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaptureAccess().getAndKeyword_1_1_0()); }
	('and')?
	{ after(grammarAccess.getCaptureAccess().getAndKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capture__Group_1_1__1__Impl
	rule__Capture__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaptureAccess().getCapturesKeyword_1_1_1()); }
	'captures'
	{ after(grammarAccess.getCaptureAccess().getCapturesKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capture__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaptureAccess().getCaptureAssignment_1_1_2()); }
	(rule__Capture__CaptureAssignment_1_1_2)
	{ after(grammarAccess.getCaptureAccess().getCaptureAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Castle__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_0__0__Impl
	rule__Castle__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getCastleKeyword_0_0()); }
	'Castle('
	{ after(grammarAccess.getCastleAccess().getCastleKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_0__1__Impl
	rule__Castle__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getSideAssignment_0_1()); }
	(rule__Castle__SideAssignment_0_1)
	{ after(grammarAccess.getCastleAccess().getSideAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getCastleAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Castle__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_1__0__Impl
	rule__Castle__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getCastlesKeyword_1_0()); }
	'castles'
	{ after(grammarAccess.getCastleAccess().getCastlesKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_1__1__Impl
	rule__Castle__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getGroup_1_1()); }
	(rule__Castle__Group_1_1__0)?
	{ after(grammarAccess.getCastleAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getSideAssignment_1_2()); }
	(rule__Castle__SideAssignment_1_2)
	{ after(grammarAccess.getCastleAccess().getSideAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Castle__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_1_1__0__Impl
	rule__Castle__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getOnKeyword_1_1_0()); }
	'on'
	{ after(grammarAccess.getCastleAccess().getOnKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getTheKeyword_1_1_1()); }
	'the'
	{ after(grammarAccess.getCastleAccess().getTheKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Castle__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_2__0__Impl
	rule__Castle__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getMoveAssignment_2_0()); }
	(rule__Castle__MoveAssignment_2_0)
	{ after(grammarAccess.getCastleAccess().getMoveAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_2__1__Impl
	rule__Castle__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getCastleKeyword_2_1()); }
	'Castle('
	{ after(grammarAccess.getCastleAccess().getCastleKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_2__2__Impl
	rule__Castle__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getSideAssignment_2_2()); }
	(rule__Castle__SideAssignment_2_2)
	{ after(grammarAccess.getCastleAccess().getSideAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getRightParenthesisKeyword_2_3()); }
	')'
	{ after(grammarAccess.getCastleAccess().getRightParenthesisKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Castle__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_3__0__Impl
	rule__Castle__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getMoveAssignment_3_0()); }
	(rule__Castle__MoveAssignment_3_0)
	{ after(grammarAccess.getCastleAccess().getMoveAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_3__1__Impl
	rule__Castle__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getAndKeyword_3_1()); }
	'and'
	{ after(grammarAccess.getCastleAccess().getAndKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_3__2__Impl
	rule__Castle__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getCastlesKeyword_3_2()); }
	'castles'
	{ after(grammarAccess.getCastleAccess().getCastlesKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Castle__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastleAccess().getSideAssignment_3_3()); }
	(rule__Castle__SideAssignment_3_3)
	{ after(grammarAccess.getCastleAccess().getSideAssignment_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnPassant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnPassant__Group__0__Impl
	rule__EnPassant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnPassant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnPassantAccess().getCaptureAssignment_0()); }
	(rule__EnPassant__CaptureAssignment_0)
	{ after(grammarAccess.getEnPassantAccess().getCaptureAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnPassant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnPassant__Group__1__Impl
	rule__EnPassant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnPassant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnPassantAccess().getOnKeyword_1()); }
	'on'
	{ after(grammarAccess.getEnPassantAccess().getOnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnPassant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnPassant__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnPassant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnPassantAccess().getSquareAssignment_2()); }
	(rule__EnPassant__SquareAssignment_2)
	{ after(grammarAccess.getEnPassantAccess().getSquareAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Promotion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Promotion__Group__0__Impl
	rule__Promotion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Promotion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPromotionAccess().getMoveAssignment_0()); }
	(rule__Promotion__MoveAssignment_0)
	{ after(grammarAccess.getPromotionAccess().getMoveAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Promotion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Promotion__Group__1__Impl
	rule__Promotion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Promotion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPromotionAccess().getPromotionKeyword_1()); }
	'Promotion('
	{ after(grammarAccess.getPromotionAccess().getPromotionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Promotion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Promotion__Group__2__Impl
	rule__Promotion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Promotion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPromotionAccess().getPieceAssignment_2()); }
	(rule__Promotion__PieceAssignment_2)
	{ after(grammarAccess.getPromotionAccess().getPieceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Promotion__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Promotion__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Promotion__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPromotionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getPromotionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conclusion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conclusion__Group__0__Impl
	rule__Conclusion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conclusion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConclusionAccess().getMethodAssignment_0()); }
	(rule__Conclusion__MethodAssignment_0)?
	{ after(grammarAccess.getConclusionAccess().getMethodAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conclusion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conclusion__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conclusion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConclusionAccess().getResultAssignment_1()); }
	(rule__Conclusion__ResultAssignment_1)
	{ after(grammarAccess.getConclusionAccess().getResultAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeUp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeUp__Group__0__Impl
	rule__TimeUp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeUpAccess().getPlayerAssignment_0()); }
	(rule__TimeUp__PlayerAssignment_0)
	{ after(grammarAccess.getTimeUpAccess().getPlayerAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeUp__Group__1__Impl
	rule__TimeUp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeUpAccess().getRanKeyword_1()); }
	'ran'
	{ after(grammarAccess.getTimeUpAccess().getRanKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeUp__Group__2__Impl
	rule__TimeUp__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeUpAccess().getOutKeyword_2()); }
	'out'
	{ after(grammarAccess.getTimeUpAccess().getOutKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUp__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeUp__Group__3__Impl
	rule__TimeUp__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUp__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeUpAccess().getOfKeyword_3()); }
	'of'
	{ after(grammarAccess.getTimeUpAccess().getOfKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUp__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeUp__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUp__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeUpAccess().getTimeKeyword_4()); }
	'time'
	{ after(grammarAccess.getTimeUpAccess().getTimeKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Resign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Resign__Group__0__Impl
	rule__Resign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Resign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResignAccess().getPlayerAssignment_0()); }
	(rule__Resign__PlayerAssignment_0)
	{ after(grammarAccess.getResignAccess().getPlayerAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Resign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Resign__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Resign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResignAccess().getResignedKeyword_1()); }
	'resigned'
	{ after(grammarAccess.getResignAccess().getResignedKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Checkmate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkmate__Group__0__Impl
	rule__Checkmate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkmate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckmateAccess().getPlayer1Assignment_0()); }
	(rule__Checkmate__Player1Assignment_0)
	{ after(grammarAccess.getCheckmateAccess().getPlayer1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkmate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkmate__Group__1__Impl
	rule__Checkmate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkmate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckmateAccess().getCheckmatedKeyword_1()); }
	'checkmated'
	{ after(grammarAccess.getCheckmateAccess().getCheckmatedKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkmate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkmate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkmate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckmateAccess().getPlayer2Assignment_2()); }
	(rule__Checkmate__Player2Assignment_2)
	{ after(grammarAccess.getCheckmateAccess().getPlayer2Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Draw__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Draw__Group__0__Impl
	rule__Draw__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrawAccess().getPlayer1Assignment_0()); }
	(rule__Draw__Player1Assignment_0)
	{ after(grammarAccess.getDrawAccess().getPlayer1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Draw__Group__1__Impl
	rule__Draw__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrawAccess().getAndKeyword_1()); }
	'and'
	{ after(grammarAccess.getDrawAccess().getAndKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Draw__Group__2__Impl
	rule__Draw__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrawAccess().getPlayer2Assignment_2()); }
	(rule__Draw__Player2Assignment_2)
	{ after(grammarAccess.getDrawAccess().getPlayer2Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Draw__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrawAccess().getResultAssignment_3()); }
	(rule__Draw__ResultAssignment_3)
	{ after(grammarAccess.getDrawAccess().getResultAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stalemate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stalemate__Group__0__Impl
	rule__Stalemate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStalemateAccess().getEndedKeyword_0()); }
	'ended'
	{ after(grammarAccess.getStalemateAccess().getEndedKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stalemate__Group__1__Impl
	rule__Stalemate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStalemateAccess().getTheKeyword_1()); }
	'the'
	{ after(grammarAccess.getStalemateAccess().getTheKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stalemate__Group__2__Impl
	rule__Stalemate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStalemateAccess().getGameKeyword_2()); }
	'game'
	{ after(grammarAccess.getStalemateAccess().getGameKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stalemate__Group__3__Impl
	rule__Stalemate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStalemateAccess().getInKeyword_3()); }
	'in'
	{ after(grammarAccess.getStalemateAccess().getInKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stalemate__Group__4__Impl
	rule__Stalemate__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStalemateAccess().getAKeyword_4()); }
	'a'
	{ after(grammarAccess.getStalemateAccess().getAKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stalemate__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stalemate__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStalemateAccess().getStalemateKeyword_5()); }
	'stalemate'
	{ after(grammarAccess.getStalemateAccess().getStalemateKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Threefold__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Threefold__Group__0__Impl
	rule__Threefold__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Threefold__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThreefoldAccess().getRepeatedKeyword_0()); }
	'repeated'
	{ after(grammarAccess.getThreefoldAccess().getRepeatedKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Threefold__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Threefold__Group__1__Impl
	rule__Threefold__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Threefold__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThreefoldAccess().getAKeyword_1()); }
	'a'
	{ after(grammarAccess.getThreefoldAccess().getAKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Threefold__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Threefold__Group__2__Impl
	rule__Threefold__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Threefold__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThreefoldAccess().getPositionKeyword_2()); }
	'position'
	{ after(grammarAccess.getThreefoldAccess().getPositionKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Threefold__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Threefold__Group__3__Impl
	rule__Threefold__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Threefold__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThreefoldAccess().getThreeKeyword_3()); }
	'three'
	{ after(grammarAccess.getThreefoldAccess().getThreeKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Threefold__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Threefold__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Threefold__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThreefoldAccess().getTimesKeyword_4()); }
	'times'
	{ after(grammarAccess.getThreefoldAccess().getTimesKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fifty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fifty__Group__0__Impl
	rule__Fifty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFiftyAccess().getPlayedKeyword_0()); }
	'played'
	{ after(grammarAccess.getFiftyAccess().getPlayedKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fifty__Group__1__Impl
	rule__Fifty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFiftyAccess().getFiftyKeyword_1()); }
	'fifty'
	{ after(grammarAccess.getFiftyAccess().getFiftyKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fifty__Group__2__Impl
	rule__Fifty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFiftyAccess().getMovesKeyword_2()); }
	'moves'
	{ after(grammarAccess.getFiftyAccess().getMovesKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fifty__Group__3__Impl
	rule__Fifty__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFiftyAccess().getWithoutKeyword_3()); }
	'without'
	{ after(grammarAccess.getFiftyAccess().getWithoutKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fifty__Group__4__Impl
	rule__Fifty__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFiftyAccess().getAKeyword_4()); }
	'a'
	{ after(grammarAccess.getFiftyAccess().getAKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fifty__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fifty__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFiftyAccess().getCaptureKeyword_5()); }
	'capture'
	{ after(grammarAccess.getFiftyAccess().getCaptureKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Agree__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Agree__Group__0__Impl
	rule__Agree__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Agree__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAgreeAccess().getAgreedKeyword_0()); }
	'agreed'
	{ after(grammarAccess.getAgreeAccess().getAgreedKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Agree__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Agree__Group__1__Impl
	rule__Agree__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Agree__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAgreeAccess().getToKeyword_1()); }
	'to'
	{ after(grammarAccess.getAgreeAccess().getToKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Agree__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Agree__Group__2__Impl
	rule__Agree__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Agree__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAgreeAccess().getAKeyword_2()); }
	'a'
	{ after(grammarAccess.getAgreeAccess().getAKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Agree__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Agree__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Agree__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAgreeAccess().getDrawKeyword_3()); }
	'draw'
	{ after(grammarAccess.getAgreeAccess().getDrawKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Result__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Result__Group_0__0__Impl
	rule__Result__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResultAccess().getAlternatives_0_0()); }
	(rule__Result__Alternatives_0_0)
	{ after(grammarAccess.getResultAccess().getAlternatives_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Result__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResultAccess().getWinsKeyword_0_1()); }
	'wins'
	{ after(grammarAccess.getResultAccess().getWinsKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__GameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGameGameParserRuleCall_0()); }
		ruleGame
		{ after(grammarAccess.getModelAccess().getGameGameParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__TitleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getTitleSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getGameAccess().getTitleSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__PlayersAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getPlayersPlayerParserRuleCall_2_1_0()); }
		rulePlayer
		{ after(grammarAccess.getGameAccess().getPlayersPlayerParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__InitialAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getInitialInitialStateParserRuleCall_3_0()); }
		ruleInitialState
		{ after(grammarAccess.getGameAccess().getInitialInitialStateParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__MovesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getMovesMovePairParserRuleCall_5_0()); }
		ruleMovePair
		{ after(grammarAccess.getGameAccess().getMovesMovePairParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__ConclusionAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getConclusionConclusionParserRuleCall_7_0()); }
		ruleConclusion
		{ after(grammarAccess.getGameAccess().getConclusionConclusionParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Player__ColorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlayerAccess().getColorColorEnumRuleCall_0_0()); }
		ruleColor
		{ after(grammarAccess.getPlayerAccess().getColorColorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Player__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlayerAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getPlayerAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialState__PositionsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitialStateAccess().getPositionsCustomPositionsParserRuleCall_2_1_1_0()); }
		ruleCustomPositions
		{ after(grammarAccess.getInitialStateAccess().getPositionsCustomPositionsParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPositions__PlacementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCustomPositionsAccess().getPlacementPlacementParserRuleCall_3_0()); }
		rulePlacement
		{ after(grammarAccess.getCustomPositionsAccess().getPlacementPlacementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Placement__PieceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlacementAccess().getPieceCustomPieceParserRuleCall_0_0()); }
		ruleCustomPiece
		{ after(grammarAccess.getPlacementAccess().getPieceCustomPieceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Placement__SquareAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlacementAccess().getSquareSquareParserRuleCall_2_0()); }
		ruleSquare
		{ after(grammarAccess.getPlacementAccess().getSquareSquareParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPiece__ColorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCustomPieceAccess().getColorColorEnumRuleCall_0_0()); }
		ruleColor
		{ after(grammarAccess.getCustomPieceAccess().getColorColorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomPiece__KindAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCustomPieceAccess().getKindPieceEnumRuleCall_1_0()); }
		rulePiece
		{ after(grammarAccess.getCustomPieceAccess().getKindPieceEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__MoveNumberAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovePairAccess().getMoveNumberMOVENUMBERParserRuleCall_0_0()); }
		ruleMOVENUMBER
		{ after(grammarAccess.getMovePairAccess().getMoveNumberMOVENUMBERParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Color1Assignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovePairAccess().getColor1PlayerOrColorCrossReference_1_0_0_0()); }
		(
			{ before(grammarAccess.getMovePairAccess().getColor1PlayerOrColorIDTerminalRuleCall_1_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMovePairAccess().getColor1PlayerOrColorIDTerminalRuleCall_1_0_0_0_1()); }
		)
		{ after(grammarAccess.getMovePairAccess().getColor1PlayerOrColorCrossReference_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__WhiteMoveAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovePairAccess().getWhiteMoveAnyMoveParserRuleCall_1_0_1_0()); }
		ruleAnyMove
		{ after(grammarAccess.getMovePairAccess().getWhiteMoveAnyMoveParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__Color2Assignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovePairAccess().getColor2PlayerOrColorCrossReference_2_0_0()); }
		(
			{ before(grammarAccess.getMovePairAccess().getColor2PlayerOrColorIDTerminalRuleCall_2_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMovePairAccess().getColor2PlayerOrColorIDTerminalRuleCall_2_0_0_1()); }
		)
		{ after(grammarAccess.getMovePairAccess().getColor2PlayerOrColorCrossReference_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MovePair__BlackMoveAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovePairAccess().getBlackMoveAnyMoveParserRuleCall_2_1_0()); }
		ruleAnyMove
		{ after(grammarAccess.getMovePairAccess().getBlackMoveAnyMoveParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyMove__MoveAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnyMoveAccess().getMoveDSLMoveParserRuleCall_0_0()); }
		ruleDSLMove
		{ after(grammarAccess.getAnyMoveAccess().getMoveDSLMoveParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyMove__RemarksAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnyMoveAccess().getRemarksRemarkEnumRuleCall_1_1_0()); }
		ruleRemark
		{ after(grammarAccess.getAnyMoveAccess().getRemarksRemarkEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__PieceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getPiecePieceEnumRuleCall_1_0()); }
		rulePiece
		{ after(grammarAccess.getMoveAccess().getPiecePieceEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__FromAssignment_2_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getFromSquareParserRuleCall_2_0_1_0()); }
		ruleSquare
		{ after(grammarAccess.getMoveAccess().getFromSquareParserRuleCall_2_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__ToAssignment_2_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getToSquareParserRuleCall_2_0_3_0()); }
		ruleSquare
		{ after(grammarAccess.getMoveAccess().getToSquareParserRuleCall_2_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__FromAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getFromSquareParserRuleCall_2_1_1_0()); }
		ruleSquare
		{ after(grammarAccess.getMoveAccess().getFromSquareParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__ToAssignment_2_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getToSquareParserRuleCall_2_1_3_0()); }
		ruleSquare
		{ after(grammarAccess.getMoveAccess().getToSquareParserRuleCall_2_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__MoveAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaptureAccess().getMoveMoveParserRuleCall_0_0()); }
		ruleMove
		{ after(grammarAccess.getCaptureAccess().getMoveMoveParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__CaptureAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaptureAccess().getCapturePieceEnumRuleCall_1_0_1_0()); }
		rulePiece
		{ after(grammarAccess.getCaptureAccess().getCapturePieceEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capture__CaptureAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaptureAccess().getCapturePieceEnumRuleCall_1_1_2_0()); }
		rulePiece
		{ after(grammarAccess.getCaptureAccess().getCapturePieceEnumRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__SideAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getSideAlternatives_0_1_0()); }
		(rule__Castle__SideAlternatives_0_1_0)
		{ after(grammarAccess.getCastleAccess().getSideAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__SideAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getSideAlternatives_1_2_0()); }
		(rule__Castle__SideAlternatives_1_2_0)
		{ after(grammarAccess.getCastleAccess().getSideAlternatives_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__MoveAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getMoveMoveParserRuleCall_2_0_0()); }
		ruleMove
		{ after(grammarAccess.getCastleAccess().getMoveMoveParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__SideAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getSideAlternatives_2_2_0()); }
		(rule__Castle__SideAlternatives_2_2_0)
		{ after(grammarAccess.getCastleAccess().getSideAlternatives_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__MoveAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getMoveMoveParserRuleCall_3_0_0()); }
		ruleMove
		{ after(grammarAccess.getCastleAccess().getMoveMoveParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__SideAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastleAccess().getSideAlternatives_3_3_0()); }
		(rule__Castle__SideAlternatives_3_3_0)
		{ after(grammarAccess.getCastleAccess().getSideAlternatives_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnPassant__CaptureAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnPassantAccess().getCaptureCaptureParserRuleCall_0_0()); }
		ruleCapture
		{ after(grammarAccess.getEnPassantAccess().getCaptureCaptureParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnPassant__SquareAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnPassantAccess().getSquareSquareParserRuleCall_2_0()); }
		ruleSquare
		{ after(grammarAccess.getEnPassantAccess().getSquareSquareParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Promotion__MoveAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPromotionAccess().getMoveAlternatives_0_0()); }
		(rule__Promotion__MoveAlternatives_0_0)
		{ after(grammarAccess.getPromotionAccess().getMoveAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Promotion__PieceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPromotionAccess().getPiecePieceEnumRuleCall_2_0()); }
		rulePiece
		{ after(grammarAccess.getPromotionAccess().getPiecePieceEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conclusion__MethodAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConclusionAccess().getMethodMethodParserRuleCall_0_0()); }
		ruleMethod
		{ after(grammarAccess.getConclusionAccess().getMethodMethodParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conclusion__ResultAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConclusionAccess().getResultResultParserRuleCall_1_0()); }
		ruleResult
		{ after(grammarAccess.getConclusionAccess().getResultResultParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__WinAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getWinWinParserRuleCall_0_0()); }
		ruleWin
		{ after(grammarAccess.getMethodAccess().getWinWinParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__DrawAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getDrawDrawParserRuleCall_1_0()); }
		ruleDraw
		{ after(grammarAccess.getMethodAccess().getDrawDrawParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Win__TimeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWinAccess().getTimeTimeUpParserRuleCall_0_0()); }
		ruleTimeUp
		{ after(grammarAccess.getWinAccess().getTimeTimeUpParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Win__ResignAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWinAccess().getResignResignParserRuleCall_1_0()); }
		ruleResign
		{ after(grammarAccess.getWinAccess().getResignResignParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Win__MateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWinAccess().getMateCheckmateParserRuleCall_2_0()); }
		ruleCheckmate
		{ after(grammarAccess.getWinAccess().getMateCheckmateParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUp__PlayerAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUpAccess().getPlayerPlayerOrColorParserRuleCall_0_0()); }
		rulePlayerOrColor
		{ after(grammarAccess.getTimeUpAccess().getPlayerPlayerOrColorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Resign__PlayerAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResignAccess().getPlayerPlayerOrColorParserRuleCall_0_0()); }
		rulePlayerOrColor
		{ after(grammarAccess.getResignAccess().getPlayerPlayerOrColorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkmate__Player1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckmateAccess().getPlayer1PlayerOrColorParserRuleCall_0_0()); }
		rulePlayerOrColor
		{ after(grammarAccess.getCheckmateAccess().getPlayer1PlayerOrColorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkmate__Player2Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckmateAccess().getPlayer2PlayerOrColorParserRuleCall_2_0()); }
		rulePlayerOrColor
		{ after(grammarAccess.getCheckmateAccess().getPlayer2PlayerOrColorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__Player1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDrawAccess().getPlayer1PlayerOrColorParserRuleCall_0_0()); }
		rulePlayerOrColor
		{ after(grammarAccess.getDrawAccess().getPlayer1PlayerOrColorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__Player2Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDrawAccess().getPlayer2PlayerOrColorParserRuleCall_2_0()); }
		rulePlayerOrColor
		{ after(grammarAccess.getDrawAccess().getPlayer2PlayerOrColorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Draw__ResultAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDrawAccess().getResultAlternatives_3_0()); }
		(rule__Draw__ResultAlternatives_3_0)
		{ after(grammarAccess.getDrawAccess().getResultAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__PlayerAssignment_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResultAccess().getPlayerPlayerCrossReference_0_0_0_0()); }
		(
			{ before(grammarAccess.getResultAccess().getPlayerPlayerIDTerminalRuleCall_0_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getResultAccess().getPlayerPlayerIDTerminalRuleCall_0_0_0_0_1()); }
		)
		{ after(grammarAccess.getResultAccess().getPlayerPlayerCrossReference_0_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__ColorAssignment_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResultAccess().getColorColorEnumRuleCall_0_0_1_0()); }
		ruleColor
		{ after(grammarAccess.getResultAccess().getColorColorEnumRuleCall_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlayerOrColor__PlayerAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlayerOrColorAccess().getPlayerPlayerCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPlayerOrColorAccess().getPlayerPlayerIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPlayerOrColorAccess().getPlayerPlayerIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPlayerOrColorAccess().getPlayerPlayerCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlayerOrColor__ColorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlayerOrColorAccess().getColorColorEnumRuleCall_1_0()); }
		ruleColor
		{ after(grammarAccess.getPlayerOrColorAccess().getColorColorEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Square__SquareAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSquareAccess().getSquareSQUARETERMINALTerminalRuleCall_0()); }
		RULE_SQUARETERMINAL
		{ after(grammarAccess.getSquareAccess().getSquareSQUARETERMINALTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SQUARETERMINAL : ('a'..'h'|'A'..'H') '1'..'8';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
